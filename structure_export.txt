# === Fichier: ./export_structure_Version3.py ===

```python
import os

# Dossiers/racine à inclure (adapte si besoin)
ROOTS = [
    ".",               # racine (main.py, README.md, etc.)
    "club_manager",
    "resources",
    "modules",
    "scripts",
    "tests"
]

# Extensions de fichiers à inclure
INCLUDE_EXT = {".py", ".md", ".txt", ".toml", ".ini", ".csv", ".yml", ".yaml", ".ui" ".db"}

# Fichiers/dossiers à exclure
EXCLUDE_FILES = {".gitignore", "structure_export.txt", "export_structure.py", "__pycache__"}
EXCLUDE_DIRS = {".git", "__pycache__", "build", "dist", ".mypy_cache"}

EXPORT_FILE = "structure_export.txt"
SPLIT_MARKER = "\n\n# ===== FICHIER SUIVANT =====\n\n"

def is_valid_file(path):
    base = os.path.basename(path)
    ext = os.path.splitext(base)[1].lower()
    if base in EXCLUDE_FILES:
        return False
    if ext not in INCLUDE_EXT:
        return False
    return True

def walk_files():
    for root in ROOTS:
        if not os.path.exists(root):
            continue
        for dirpath, dirnames, filenames in os.walk(root):
            dirnames[:] = [d for d in dirnames if d not in EXCLUDE_DIRS]
            for fname in filenames:
                fpath = os.path.join(dirpath, fname)
                if is_valid_file(fpath):
                    yield fpath.replace("\\", "/")

def export_structure():
    parts = []
    for fpath in walk_files():
        try:
            with open(fpath, encoding="utf-8") as f:
                content = f.read()
        except Exception as e:
            content = f"# ERREUR DE LECTURE : {e}"
        part = f"# === Fichier: {fpath} ===\n\n"
        ext = os.path.splitext(fpath)[1].lower()
        if ext == ".py":
            part += f"```python\n{content}\n```\n"
        elif ext == ".md":
            part += f"````markdown\n{content}\n````\n"
        elif ext in (".yml", ".yaml"):
            part += f"```yaml\n{content}\n```\n"
        elif ext in (".toml", ".ini"):
            part += f"```toml\n{content}\n```\n"
        else:
            part += f"```\n{content}\n```\n"
        parts.append(part)
    with open(EXPORT_FILE, "w", encoding="utf-8") as out:
        out.write(SPLIT_MARKER.join(parts))
    print(f"Export terminé dans {EXPORT_FILE} ({len(parts)} fichiers).")

if __name__ == "__main__":
    export_structure()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./pytest.ini ===

```toml
[pytest]
minversion = 6.0
addopts = -ra -q
testpaths = 
    tests
python_files = test_*.py
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./structure.md ===

````markdown
club_manager/
├── main.py
├── main_window.py
├── core/
│   ├── __init__.py
│   ├── database.py
│   ├── export.py
│   ├── mailing.py
│   ├── audit.py
│   ├── backup.py
│   ├── custom_fields.py
│   ├── theming.py
│   ├── rgpd.py
│   └── utils.py
├── ui/
│   ├── __init__.py
│   └── ... (tous les fichiers dialogs, tabs, ui déjà listés)
├── resources/
│   ├── ui/
│   │   └── ... (tous les .ui déjà listés)
│   ├── images/
│   │   ├── logo.png
│   └── styles/
│       └── default.qss
├── README.md
├── requirements.txt
└── tests/
    ├── test_database.py
    ├── test_export.py
    ├── test_mailing.py
    ├── test_audit.py
    ├── test_backup.py
    ├── test_custom_fields.py
    ├── test_theming.py
    ├── test_rgpd.py
    ├── test_utils.py
    └── (tests pour chaque composant métier et UI)
````


# ===== FICHIER SUIVANT =====

# === Fichier: ./.github/workflows/ci.yml ===

```yaml
name: ClubManager CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    - name: Run tests
      run: pytest
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/main.py ===

```python
# -*- coding: utf-8 -*-
"""
Script de démarrage principal pour Club Manager.
Initialise l'application PyQt5, affiche la fenêtre principale.
"""

import sys
from PyQt5.QtWidgets import QApplication
from club_manager.main_window import MainWindow

def main():
    app = QApplication(sys.argv)
    app.setApplicationName("Club Manager")
    app.setOrganizationName("DarkSario")
    app.setStyle("Fusion")
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/main_window.py ===

```python
# -*- coding: utf-8 -*-
"""
Fenêtre principale de Club Manager.
Gère l'orchestration des tabs, menus, dialogs, et la logique globale.
"""

from PyQt5.QtWidgets import QMainWindow, QTabWidget, QAction, QFileDialog, QMessageBox
from PyQt5.QtGui import QIcon
from club_manager.ui.members_tab import MembersTab
from club_manager.ui.positions_tab import PositionsTab
from club_manager.ui.sessions_tab import SessionsTab
from club_manager.ui.cotisations_tab import CotisationsTab
from club_manager.ui.custom_fields_tab import CustomFieldsTab
from club_manager.ui.audit_tab import AuditTab
from club_manager.ui.exports_tab import ExportsTab
from club_manager.ui.mailing_tab import MailingTab
from club_manager.ui.theming_tab import ThemingTab
from club_manager.ui.backup_tab import BackupTab
from club_manager.ui.about_dialog import AboutDialog
from club_manager.ui.welcome_dialog import WelcomeDialog
from club_manager.ui.tutorial_dialog import TutorialDialog
from club_manager.ui.doc_viewer_dialog import DocViewerDialog
from club_manager.core.theming import load_theme_choice, load_theme

class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Club Manager")
        self.setWindowIcon(QIcon(":/images/logo.png"))
        self.resize(1200, 780)
        self.setup_tabs()        # Initialiser les tabs en premier !
        self.setup_menu()
        self.apply_theme_on_startup()
        self.show_welcome_if_first_launch()

    def setup_tabs(self):
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        self.members_tab = MembersTab()
        self.positions_tab = PositionsTab()
        self.sessions_tab = SessionsTab()
        self.cotisations_tab = CotisationsTab()
        self.custom_fields_tab = CustomFieldsTab()
        self.audit_tab = AuditTab()
        self.exports_tab = ExportsTab()
        self.mailing_tab = MailingTab()
        self.theming_tab = ThemingTab()
        self.backup_tab = BackupTab()

        self.tabs.addTab(self.members_tab, "Membres")
        self.tabs.addTab(self.positions_tab, "Postes")
        self.tabs.addTab(self.sessions_tab, "Sessions")
        self.tabs.addTab(self.cotisations_tab, "Cotisations")
        self.tabs.addTab(self.custom_fields_tab, "Champs personnalisés")
        self.tabs.addTab(self.exports_tab, "Exports")
        self.tabs.addTab(self.mailing_tab, "Mailing")
        self.tabs.addTab(self.audit_tab, "Audit")
        self.tabs.addTab(self.theming_tab, "Thème")
        self.tabs.addTab(self.backup_tab, "Sauvegarde")

    def setup_menu(self):
        menu = self.menuBar()
        file_menu = menu.addMenu("&Fichier")
        help_menu = menu.addMenu("&Aide")

        action_backup = QAction("Exporter une sauvegarde...", self)
        action_backup.triggered.connect(self.backup_tab.start_backup)
        file_menu.addAction(action_backup)

        action_restore = QAction("Restaurer une sauvegarde...", self)
        action_restore.triggered.connect(self.backup_tab.start_restore)
        file_menu.addAction(action_restore)

        action_exit = QAction("Quitter", self)
        action_exit.triggered.connect(self.close)
        file_menu.addAction(action_exit)

        action_tutorial = QAction("Tutoriel interactif", self)
        action_tutorial.triggered.connect(self.show_tutorial)
        help_menu.addAction(action_tutorial)

        action_doc = QAction("Documentation", self)
        action_doc.triggered.connect(self.show_doc)
        help_menu.addAction(action_doc)

        action_about = QAction("À propos...", self)
        action_about.triggered.connect(self.show_about)
        help_menu.addAction(action_about)

    def show_about(self):
        dialog = AboutDialog(self)
        dialog.exec_()

    def show_tutorial(self):
        dialog = TutorialDialog(self)
        dialog.exec_()

    def show_doc(self):
        # On peut charger la doc HTML embarquée ici
        html = "<h2>Documentation Club Manager</h2><p>Consultez le README ou le Wiki pour plus d'infos.</p>"
        dialog = DocViewerDialog(self, html_content=html)
        dialog.exec_()

    def apply_theme_on_startup(self):
        qss, _ = load_theme_choice()
        if qss:
            load_theme(qss, self.parent() or self)

    def show_welcome_if_first_launch(self):
        # Logique simplifiée : afficher si pas de config, sinon passer
        import os
        if not os.path.exists("club_manager.conf"):
            dlg = WelcomeDialog(self)
            if dlg.exec_() == dlg.Accepted:
                # On pourrait sauvegarder les choix ici
                open("club_manager.conf", "w").close()
            else:
                self.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/audit.py ===

```python
# -*- coding: utf-8 -*-
"""
Module de journalisation des actions (audit) pour Club Manager.
Permet de tracer toutes les opérations sensibles.
"""

from datetime import datetime
from .database import Database

def log_action(action, user, obj, details):
    db = Database.instance()
    db.execute(
        "INSERT INTO audit (date, action, user, object, details) VALUES (?, ?, ?, ?, ?)",
        (datetime.now().isoformat(), action, user, obj, details)
    )
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/auditview.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la consultation/filtrage du journal d'audit.
Permet de lister, filtrer, exporter les entrées d'audit.
"""

from .database import Database

def get_all_audit_entries():
    db = Database.instance()
    return db.query("SELECT * FROM audit ORDER BY date DESC")

def get_audit_by_user(user):
    db = Database.instance()
    return db.query("SELECT * FROM audit WHERE user=? ORDER BY date DESC", (user,))

def get_audit_by_action(action):
    db = Database.instance()
    return db.query("SELECT * FROM audit WHERE action=? ORDER BY date DESC", (action,))

def delete_audit_entry(audit_id):
    db = Database.instance()
    db.execute("DELETE FROM audit WHERE id=?", (audit_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/backup.py ===

```python
# -*- coding: utf-8 -*-
"""
Module de sauvegarde et restauration de la base (fichier .db) et des ressources.
"""
import shutil
import os
from PyQt5.QtWidgets import QFileDialog, QMessageBox

def backup_database(db_path, parent=None):
    fname, _ = QFileDialog.getSaveFileName(parent, "Exporter la sauvegarde", "", "Fichier ZIP (*.zip)")
    if not fname:
        return
    try:
        shutil.make_archive(fname.replace(".zip", ""), 'zip', os.path.dirname(db_path))
        QMessageBox.information(parent, "Sauvegarde", "Sauvegarde réalisée avec succès.")
    except Exception as e:
        QMessageBox.critical(parent, "Erreur sauvegarde", str(e))

def restore_database(parent=None):
    fname, _ = QFileDialog.getOpenFileName(parent, "Restaurer une sauvegarde", "", "Fichier ZIP (*.zip)")
    if not fname:
        return
    try:
        shutil.unpack_archive(fname, os.path.dirname(fname), 'zip')
        QMessageBox.information(parent, "Restauration", "Restauration effectuée avec succès.\nRedémarrez l'application.")
    except Exception as e:
        QMessageBox.critical(parent, "Erreur restauration", str(e))

# Fonctions stub pour l'export/import ZIP complet (pour compatibilité UI)
def export_zip_archive(parent=None):
    QMessageBox.information(parent, "Export ZIP", "L'export ZIP complet n'est pas encore implémenté.")

def import_zip_archive(parent=None):
    QMessageBox.information(parent, "Import ZIP", "L'import ZIP complet n'est pas encore implémenté.")
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/cotisations.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des cotisations (paiements) dans Club Manager.
Permet d'ajouter, modifier, supprimer, lister les cotisations, relancer les membres.
"""

from .database import Database

def get_all_cotisations():
    db = Database.instance()
    return db.query("SELECT * FROM cotisations")

def add_cotisation(member_id, session_id, amount, paid, payment_date, method, status):
    db = Database.instance()
    db.execute(
        "INSERT INTO cotisations (member_id, session_id, amount, paid, payment_date, method, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (member_id, session_id, amount, paid, payment_date, method, status)
    )

def update_cotisation(cotisation_id, member_id, session_id, amount, paid, payment_date, method, status):
    db = Database.instance()
    db.execute(
        "UPDATE cotisations SET member_id=?, session_id=?, amount=?, paid=?, payment_date=?, method=?, status=? WHERE id=?",
        (member_id, session_id, amount, paid, payment_date, method, status, cotisation_id)
    )

def delete_cotisation(cotisation_id):
    db = Database.instance()
    db.execute("DELETE FROM cotisations WHERE id=?", (cotisation_id,))

def get_late_members():
    db = Database.instance()
    # Retourne les membres dont la cotisation n'est pas "Payé"
    return db.query("""
        SELECT m.*
        FROM members m
        JOIN cotisations c ON c.member_id = m.id
        WHERE c.status != 'Payé'
    """)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/custom_fields.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des champs personnalisés dans Club Manager.
Permet d'ajouter, modifier, supprimer et interroger les champs personnalisés définis par l'utilisateur.
"""

from .database import Database

def get_all_custom_fields():
    db = Database.instance()
    return db.query("SELECT * FROM custom_fields")

def add_custom_field(name, ftype, default_value, options, constraints):
    db = Database.instance()
    db.execute(
        "INSERT INTO custom_fields (name, type, default_value, options, constraints) VALUES (?, ?, ?, ?, ?)",
        (name, ftype, default_value, options, constraints)
    )

def update_custom_field(field_id, name, ftype, default_value, options, constraints):
    db = Database.instance()
    db.execute(
        "UPDATE custom_fields SET name=?, type=?, default_value=?, options=?, constraints=? WHERE id=?",
        (name, ftype, default_value, options, constraints, field_id)
    )

def delete_custom_field(field_id):
    db = Database.instance()
    db.execute("DELETE FROM custom_fields WHERE id=?", (field_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/database.py ===

```python
# -*- coding: utf-8 -*-
"""
Module central d'accès et gestion à la base SQLite du Club Manager.
Responsable de l'initialisation, connexion, requêtes, migrations et transactions.
"""
import sqlite3
import threading

class Database:
    _instance = None
    _lock = threading.Lock()

    @staticmethod
    def instance(db_path="club_manager.db"):
        with Database._lock:
            if Database._instance is None:
                Database._instance = Database(db_path)
            return Database._instance

    def __init__(self, db_path):
        self.db_path = db_path
        self.connection = sqlite3.connect(self.db_path, check_same_thread=False)
        self.connection.row_factory = sqlite3.Row
        self.setup_schema()

    def setup_schema(self):
        cursor = self.connection.cursor()
        # Extrait simplifié, à compléter/migrer selon les évolutions métiers
        cursor.executescript("""
            CREATE TABLE IF NOT EXISTS members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                last_name TEXT, first_name TEXT, address TEXT, postal_code TEXT, city TEXT,
                phone TEXT, mail TEXT, rgpd INTEGER, image_rights INTEGER,
                health TEXT, ancv INTEGER, cash REAL, cheque1 TEXT, cheque2 TEXT, cheque3 TEXT,
                total_paid REAL, club_part REAL, mjc_part REAL,
                external_club TEXT, mjc_elsewhere TEXT
            );
            CREATE TABLE IF NOT EXISTS positions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, type TEXT, description TEXT, assigned_to INTEGER REFERENCES members(id)
            );
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, start DATE, end DATE, club_amount REAL, mjc_amount REAL, is_current INTEGER
            );
            CREATE TABLE IF NOT EXISTS cotisations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                member_id INTEGER, session_id INTEGER, amount REAL, paid REAL, payment_date DATE,
                method TEXT, status TEXT,
                FOREIGN KEY(member_id) REFERENCES members(id),
                FOREIGN KEY(session_id) REFERENCES sessions(id)
            );
            CREATE TABLE IF NOT EXISTS custom_fields (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, type TEXT, default_value TEXT, options TEXT, constraints TEXT
            );
            CREATE TABLE IF NOT EXISTS audit (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT, action TEXT, user TEXT, object TEXT, details TEXT
            );
        """)
        self.connection.commit()

    def execute(self, sql, params=None):
        cursor = self.connection.cursor()
        cursor.execute(sql, params or [])
        self.connection.commit()
        return cursor

    def query(self, sql, params=None):
        cursor = self.connection.cursor()
        cursor.execute(sql, params or [])
        return cursor.fetchall()

    def close(self):
        self.connection.close()
        Database._instance = None
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/export.py ===

```python
# -*- coding: utf-8 -*-
"""
Module d'export (CSV, PDF) des données Club Manager.
Utilise pandas pour CSV, ReportLab pour PDF.
"""

import csv
from PyQt5.QtWidgets import QFileDialog
import pandas as pd

def export_members_csv(members, parent=None):
    fname, _ = QFileDialog.getSaveFileName(parent, "Exporter en CSV", "", "Fichiers CSV (*.csv)")
    if not fname:
        return
    df = pd.DataFrame(members)
    df.to_csv(fname, index=False, encoding="utf-8")

def export_members_pdf(members, parent=None):
    try:
        from reportlab.pdfgen import canvas
    except ImportError:
        from PyQt5.QtWidgets import QMessageBox
        QMessageBox.warning(parent, "Erreur", "Le module reportlab n'est pas installé.")
        return
    fname, _ = QFileDialog.getSaveFileName(parent, "Exporter en PDF", "", "Fichiers PDF (*.pdf)")
    if not fname:
        return
    c = canvas.Canvas(fname)
    c.setFont("Helvetica", 10)
    y = 800
    for member in members:
        line = " | ".join(str(member[k]) for k in member.keys())
        c.drawString(40, y, line)
        y -= 15
        if y < 50:
            c.showPage()
            y = 800
    c.save()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/exports.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion avancée des exports (sélection dynamique, preview, etc).
Complète `core/export.py` avec gestion dynamique des champs et prévisualisation.
"""

import pandas as pd

def preview_export(data, fields):
    """Retourne un DataFrame pandas avec seulement les champs demandés (pour preview dans QTableWidget)"""
    df = pd.DataFrame(data)
    return df[fields] if fields else df

def export_selected_csv(data, fields, fname):
    """Export CSV sur un sous-ensemble de champs."""
    df = pd.DataFrame(data)
    df[fields].to_csv(fname, index=False, encoding="utf-8")
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/images.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des images (logos, photos) dans Club Manager.
Permet de stocker, charger, supprimer et référencer les images utilisées dans l'application.
"""

import os
import shutil

IMAGE_FOLDER = os.path.join(os.path.dirname(__file__), "..", "resources", "images")

def save_image(src_path, dest_name):
    if not os.path.exists(IMAGE_FOLDER):
        os.makedirs(IMAGE_FOLDER)
    dest_path = os.path.join(IMAGE_FOLDER, dest_name)
    shutil.copy(src_path, dest_path)
    return dest_path

def delete_image(image_name):
    path = os.path.join(IMAGE_FOLDER, image_name)
    if os.path.exists(path):
        os.remove(path)

def list_images():
    if not os.path.exists(IMAGE_FOLDER):
        return []
    return [f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/imports.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour l'import de données CSV (membres, cotisations, etc.) dans Club Manager.
Gère le mapping dynamique entre colonnes du CSV et champs internes.
"""

import csv
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from .database import Database

def import_csv_to_table(table, field_map, parent=None):
    """Importe un CSV dans une table donnée via un mapping {col_csv: champ_table}."""
    fname, _ = QFileDialog.getOpenFileName(parent, "Importer un fichier CSV", "", "Fichiers CSV (*.csv)")
    if not fname:
        return
    db = Database.instance()
    with open(fname, "r", encoding="utf-8-sig") as f:
        reader = csv.DictReader(f)
        count = 0
        for row in reader:
            values = [row.get(col, "") for col in field_map.keys()]
            placeholders = ','.join(['?'] * len(field_map))
            columns = ','.join(field_map.values())
            db.execute(f"INSERT INTO {table} ({columns}) VALUES ({placeholders})", values)
            count += 1
    QMessageBox.information(parent, "Import terminé", f"{count} lignes importées dans {table}.")

def guess_csv_fields(fname):
    """Retourne les noms de colonnes du CSV pour mapping dynamique."""
    with open(fname, "r", encoding="utf-8-sig") as f:
        reader = csv.reader(f)
        return next(reader)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/mailing.py ===

```python
# -*- coding: utf-8 -*-
"""
Module d'envoi de mailing groupé (SMTP) pour Club Manager.
Gère la sélection des destinataires, la composition du message, et l'envoi via SMTP.
"""
import smtplib
from email.mime.text import MIMEText
from PyQt5.QtWidgets import QMessageBox

def send_mailing(subject, message, recipient_list, smtp_config, parent=None):
    try:
        msg = MIMEText(message, "plain", "utf-8")
        msg["Subject"] = subject
        msg["From"] = smtp_config["from"]
        msg["To"] = ", ".join(recipient_list)
        with smtplib.SMTP(smtp_config["host"], smtp_config.get("port", 25)) as server:
            if smtp_config.get("tls"):
                server.starttls()
            if smtp_config.get("user"):
                server.login(smtp_config["user"], smtp_config["password"])
            server.sendmail(smtp_config["from"], recipient_list, msg.as_string())
        QMessageBox.information(parent, "Mailing", "Mail envoyé à tous les destinataires.")
    except Exception as e:
        QMessageBox.critical(parent, "Erreur SMTP", f"Erreur lors de l'envoi : {e}")
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/mailing_advanced.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier avancé pour le mailing de Club Manager.
Gère la sélection dynamique, la personnalisation de masse, les modèles (templates) et les pièces jointes.
"""

import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from PyQt5.QtWidgets import QMessageBox, QFileDialog

def select_recipients(members, filters=None):
    """Filtre dynamiquement les membres selon des critères (ex: statut cotisation, session, etc.)."""
    if not filters:
        return members
    return [m for m in members if all(m.get(k) == v for k, v in filters.items())]

def load_template(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def personalize_template(template, context):
    """Remplace les variables du template par les valeurs du contexte (ex: {prenom}, {nom})"""
    for k, v in context.items():
        template = template.replace("{" + k + "}", str(v))
    return template

def select_attachments(parent=None):
    """Ouvre un sélecteur de fichiers pour pièces jointes, retourne la liste des chemins."""
    files, _ = QFileDialog.getOpenFileNames(parent, "Sélectionnez les pièces jointes")
    return files

def send_mass_mail(subject, template, members, smtp_config, parent=None, attachments=None):
    """Envoie un mailing personnalisé à chaque membre (remplacement tags, pièces jointes, etc.)."""
    errors = []
    for m in members:
        msg = MIMEMultipart()
        context = {k: m.get(k, "") for k in m.keys()}
        msg.attach(MIMEText(personalize_template(template, context), "plain", "utf-8"))
        msg["Subject"] = subject
        msg["From"] = smtp_config["from"]
        msg["To"] = m.get("mail", "")

        # Ajout pièces jointes
        if attachments:
            for fname in attachments:
                if os.path.isfile(fname):
                    with open(fname, "rb") as f:
                        part = MIMEApplication(f.read(), Name=os.path.basename(fname))
                        part['Content-Disposition'] = f'attachment; filename="{os.path.basename(fname)}"'
                        msg.attach(part)

        try:
            with smtplib.SMTP(smtp_config["host"], smtp_config.get("port", 25)) as server:
                if smtp_config.get("tls"):
                    server.starttls()
                if smtp_config.get("user"):
                    server.login(smtp_config["user"], smtp_config["password"])
                server.sendmail(smtp_config["from"], [m.get("mail", "")], msg.as_string())
        except Exception as e:
            errors.append(f"{m.get('mail', '')}: {e}")

    if errors:
        QMessageBox.warning(parent, "Envoi partiel", "Certaines adresses ont échoué:\n" + "\n".join(errors))
    else:
        QMessageBox.information(parent, "Mailing", "Tous les mails ont été envoyés.")
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/members.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des membres (adhérents) dans Club Manager.
Permet d'ajouter, modifier, supprimer, rechercher les membres.
"""

from .database import Database

def get_all_members():
    db = Database.instance()
    return db.query("SELECT * FROM members")

def get_member_by_id(member_id):
    db = Database.instance()
    rows = db.query("SELECT * FROM members WHERE id=?", (member_id,))
    return rows[0] if rows else None

def add_member(**fields):
    db = Database.instance()
    keys = ','.join(fields.keys())
    qmarks = ','.join(['?']*len(fields))
    values = list(fields.values())
    sql = f"INSERT INTO members ({keys}) VALUES ({qmarks})"
    db.execute(sql, values)

def update_member(member_id, **fields):
    db = Database.instance()
    set_clause = ','.join([f"{k}=?" for k in fields.keys()])
    values = list(fields.values()) + [member_id]
    sql = f"UPDATE members SET {set_clause} WHERE id=?"
    db.execute(sql, values)

def delete_member(member_id):
    db = Database.instance()
    db.execute("DELETE FROM members WHERE id=?", (member_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/positions.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des postes (positions) dans Club Manager.
Permet d'ajouter, modifier, supprimer, lister les postes.
"""

from .database import Database

def get_all_positions():
    db = Database.instance()
    return db.query("SELECT * FROM positions")

def add_position(name, type, description, assigned_to=None):
    db = Database.instance()
    db.execute(
        "INSERT INTO positions (name, type, description, assigned_to) VALUES (?, ?, ?, ?)",
        (name, type, description, assigned_to)
    )

def update_position(position_id, name, type, description, assigned_to):
    db = Database.instance()
    db.execute(
        "UPDATE positions SET name=?, type=?, description=?, assigned_to=? WHERE id=?",
        (name, type, description, assigned_to, position_id)
    )

def delete_position(position_id):
    db = Database.instance()
    db.execute("DELETE FROM positions WHERE id=?", (position_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/relance.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des relances (cotisations en retard) dans Club Manager.
Gère la détection, la génération de relances et le suivi.
"""

from .database import Database

def get_members_to_remind():
    db = Database.instance()
    # Sélectionne les membres ayant au moins une cotisation non payée, par session
    return db.query("""
        SELECT m.*, s.name AS session_name, c.amount, c.paid, c.status
        FROM members m
        JOIN cotisations c ON c.member_id = m.id
        JOIN sessions s ON s.id = c.session_id
        WHERE c.status != 'Payé'
    """)

def mark_relance_sent(cotisation_id):
    db = Database.instance()
    db.execute("UPDATE cotisations SET status='Relancé' WHERE id=?", (cotisation_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/rgpd.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier RGPD pour Club Manager.
Gère la purge RGPD (anonymisation, suppression des données sensibles des anciens membres).
"""
from .database import Database

def purge_rgpd():
    db = Database.instance()
    # Exemple : anonymisation de tous les membres dont l’adhésion est expirée (>2 ans, ici simplifié)
    db.execute("""
        UPDATE members
        SET last_name='ANONYMISE', first_name='ANONYMISE', address='', postal_code='', city='',
            phone='', mail='', health='', external_club='', mjc_elsewhere=''
        WHERE id IN (
            SELECT m.id
            FROM members m
            LEFT JOIN cotisations c ON c.member_id = m.id
            WHERE c.payment_date IS NULL OR c.payment_date < date('now', '-2 years')
        )
    """)
    # Suppression en cascade des cotisations de ces membres si souhaité :
    # db.execute("DELETE FROM cotisations WHERE member_id IN (SELECT id FROM members WHERE last_name='ANONYMISE')")

def is_rgpd_ready(member):
    """Vérifie si le membre coche toutes les cases RGPD (consentement, etc.)"""
    return bool(member.get("rgpd"))
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/sessions.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des sessions (saisons/périodes) dans Club Manager.
Permet d'ajouter, modifier, supprimer, lister les sessions, définir la session courante.
"""

from .database import Database

def get_all_sessions():
    db = Database.instance()
    return db.query("SELECT * FROM sessions")

def add_session(name, start, end, club_amount, mjc_amount, is_current=False):
    db = Database.instance()
    if is_current:
        db.execute("UPDATE sessions SET is_current=0")
    db.execute(
        "INSERT INTO sessions (name, start, end, club_amount, mjc_amount, is_current) VALUES (?, ?, ?, ?, ?, ?)",
        (name, start, end, club_amount, mjc_amount, int(is_current))
    )

def update_session(session_id, name, start, end, club_amount, mjc_amount, is_current):
    db = Database.instance()
    if is_current:
        db.execute("UPDATE sessions SET is_current=0")
    db.execute(
        "UPDATE sessions SET name=?, start=?, end=?, club_amount=?, mjc_amount=?, is_current=? WHERE id=?",
        (name, start, end, club_amount, mjc_amount, int(is_current), session_id)
    )

def delete_session(session_id):
    db = Database.instance()
    db.execute("DELETE FROM sessions WHERE id=?", (session_id,))

def set_current_session(session_id):
    db = Database.instance()
    db.execute("UPDATE sessions SET is_current=0")
    db.execute("UPDATE sessions SET is_current=1 WHERE id=?", (session_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/statistics.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour les statistiques et tableaux de bord de Club Manager.
Permet de calculer ratios, répartitions, historiques pour affichage graphique ou synthèse.
"""

from .database import Database

def count_members():
    db = Database.instance()
    rows = db.query("SELECT COUNT(*) AS count FROM members")
    return rows[0]["count"] if rows else 0

def count_members_by_city():
    db = Database.instance()
    return db.query("SELECT city, COUNT(*) AS count FROM members GROUP BY city ORDER BY count DESC")

def count_cotisations_by_status():
    db = Database.instance()
    return db.query("SELECT status, COUNT(*) AS count FROM cotisations GROUP BY status")

def total_collected_fees():
    db = Database.instance()
    rows = db.query("SELECT SUM(paid) AS total FROM cotisations")
    return rows[0]["total"] if rows else 0

def session_history():
    db = Database.instance()
    return db.query("""
        SELECT s.name, COUNT(c.id) AS nb_adhesions, SUM(c.paid) AS montant_total
        FROM sessions s
        LEFT JOIN cotisations c ON c.session_id = s.id
        GROUP BY s.name
        ORDER BY s.start DESC
    """)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/theming.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion de la thématisation (couleurs, logo, QSS) de Club Manager.
Gère le chargement, l'application et la sauvegarde des thèmes graphiques.
"""

import os
from PyQt5.QtWidgets import QFileDialog, QMessageBox

def load_theme(qss_path, app):
    """Charge et applique un fichier QSS à l'application."""
    if not os.path.exists(qss_path):
        return
    with open(qss_path, "r", encoding="utf-8") as f:
        app.setStyleSheet(f.read())

def import_logo(parent=None):
    """Importe un logo depuis le disque et retourne le chemin (à stocker)"""
    fname, _ = QFileDialog.getOpenFileName(parent, "Choisir un logo", "", "Images (*.png *.jpg *.jpeg *.bmp)")
    return fname

def save_theme_choice(qss_path, logo_path, config_path="theme.conf"):
    """Sauvegarde le thème choisi (QSS et logo) dans un fichier de conf simple."""
    with open(config_path, "w", encoding="utf-8") as f:
        f.write(f"qss={qss_path}\nlogo={logo_path}\n")

def load_theme_choice(config_path="theme.conf"):
    """Charge le thème choisi (QSS et logo) depuis le fichier de conf."""
    if not os.path.exists(config_path):
        return None, None
    qss = logo = None
    with open(config_path, "r", encoding="utf-8") as f:
        for line in f:
            if line.startswith("qss="):
                qss = line[4:].strip()
            elif line.startswith("logo="):
                logo = line[5:].strip()
    return qss, logo
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/core/utils.py ===

```python
# -*- coding: utf-8 -*-
"""
Utilitaires transverses Club Manager (validation, génération, etc.)
"""

import re

def is_email_valid(email):
    return bool(re.match(r"[^@]+@[^@]+\.[^@]+", email))

def is_phone_valid(phone):
    return bool(re.match(r"^0[1-9]([-. ]?\d{2}){4}$", phone))

def format_currency(amount):
    try:
        return "{:.2f} €".format(float(amount))
    except Exception:
        return str(amount)

def safe_str(obj):
    try:
        return str(obj)
    except Exception:
        return ""
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/about_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/about_dialog.py
Rôle : Fenêtre modale "À propos" (version, crédits, informations légales).
Hérite de QDialog et Ui_AboutDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_AboutDialog généré par pyuic5 à partir de resources/ui/about_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.about_dialog_ui import Ui_AboutDialog

class AboutDialog(QtWidgets.QDialog, Ui_AboutDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/about_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/about_dialog.ui
Classe : Ui_AboutDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_AboutDialog(object):
    def setupUi(self, AboutDialog):
        AboutDialog.setObjectName("AboutDialog")
        AboutDialog.resize(400, 320)
        self.verticalLayout = QtWidgets.QVBoxLayout(AboutDialog)
        self.labelLogo = QtWidgets.QLabel(AboutDialog)
        self.labelLogo.setText("CLUB MANAGER")
        self.labelLogo.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelLogo)
        self.labelVersion = QtWidgets.QLabel(AboutDialog)
        self.labelVersion.setText("Version 1.0.0")
        self.labelVersion.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelVersion)
        self.labelCopyright = QtWidgets.QLabel(AboutDialog)
        self.labelCopyright.setText("© 2025 DarkSario\nLicence libre, voir documentation.")
        self.labelCopyright.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelCopyright)
        self.textCredits = QtWidgets.QTextBrowser(AboutDialog)
        self.textCredits.setHtml(
            "<b>Auteurs</b>: DarkSario & contributeurs<br>"
            "<b>Remerciements</b>: Projet open-source inspiré par la communauté.<br>"
            "<b>Librairies</b>: PyQt5, SQLite, etc.<br><br>"
            "<i>Pour toute remarque ou bug, voir la documentation ou le dépôt GitHub.</i>"
        )
        self.textCredits.setOpenExternalLinks(True)
        self.verticalLayout.addWidget(self.textCredits)
        self.buttonBox = QtWidgets.QDialogButtonBox(AboutDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/audit_details_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/audit_details_dialog.py
Rôle : Fenêtre modale de détails d'une entrée d'audit.
Hérite de QDialog et Ui_AuditDetailsDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_AuditDetailsDialog généré par pyuic5 à partir de resources/ui/audit_details_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.audit_details_dialog_ui import Ui_AuditDetailsDialog

class AuditDetailsDialog(QtWidgets.QDialog, Ui_AuditDetailsDialog):
    def __init__(self, parent=None, details=None):
        super().__init__(parent)
        self.setupUi(self)
        if details:
            self.labelDate.setText(details.get("date", ""))
            self.labelAction.setText(details.get("action", ""))
            self.labelUser.setText(details.get("user", ""))
            self.labelObject.setText(details.get("object", ""))
            self.textDetails.setPlainText(details.get("details", ""))
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/audit_details_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/audit_details_dialog.ui
Classe : Ui_AuditDetailsDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_AuditDetailsDialog(object):
    def setupUi(self, AuditDetailsDialog):
        AuditDetailsDialog.setObjectName("AuditDetailsDialog")
        AuditDetailsDialog.resize(500, 300)
        self.verticalLayout = QtWidgets.QVBoxLayout(AuditDetailsDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.labelDate = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Date :", self.labelDate)
        self.labelAction = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Action :", self.labelAction)
        self.labelUser = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Utilisateur :", self.labelUser)
        self.labelObject = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Objet :", self.labelObject)
        self.verticalLayout.addLayout(self.formLayout)
        self.textDetails = QtWidgets.QTextEdit(AuditDetailsDialog)
        self.textDetails.setReadOnly(True)
        self.textDetails.setPlaceholderText("Détails de l'action...")
        self.verticalLayout.addWidget(self.textDetails)
        self.buttonBox = QtWidgets.QDialogButtonBox(AuditDetailsDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/audit_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/audit_tab.py
Rôle : Onglet audit (AuditTab) du Club Manager.
Hérite de QWidget et de Ui_AuditTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_AuditTab généré par pyuic5 à partir de resources/ui/audit_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.audit_tab_ui import Ui_AuditTab

class AuditTab(QtWidgets.QWidget, Ui_AuditTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonExportAudit.clicked.connect(self.export_audit)
        self.buttonPurgeRGPD.clicked.connect(self.purge_rgpd)
        self.tableAudit.doubleClicked.connect(self.view_audit_entry)

    def export_audit(self):
        # Exporter le journal d'audit (CSV/PDF)
        pass

    def purge_rgpd(self):
        # Lancer la purge RGPD (suppression/anonymisation)
        pass

    def view_audit_entry(self):
        # Afficher le détail d'une entrée d'audit
        pass

    def refresh_audit(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/audit_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/audit_tab.ui
Classe : Ui_AuditTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_AuditTab(object):
    def setupUi(self, AuditTab):
        AuditTab.setObjectName("AuditTab")
        AuditTab.resize(900, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(AuditTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonExportAudit = QtWidgets.QPushButton(AuditTab)
        self.buttonExportAudit.setText("Exporter le journal")
        self.buttonPurgeRGPD = QtWidgets.QPushButton(AuditTab)
        self.buttonPurgeRGPD.setText("Purge RGPD")
        self.horizontalLayoutTop.addWidget(self.buttonExportAudit)
        self.horizontalLayoutTop.addWidget(self.buttonPurgeRGPD)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableAudit = QtWidgets.QTableWidget(AuditTab)
        self.tableAudit.setColumnCount(5)
        self.tableAudit.setHorizontalHeaderLabels([
            "Date", "Action", "Utilisateur", "Objet", "Détail"
        ])
        self.verticalLayout.addWidget(self.tableAudit)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/backup_restore_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/backup_restore_dialog.py
Rôle : Fenêtre modale de restauration de sauvegarde.
Hérite de QDialog et Ui_BackupRestoreDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_BackupRestoreDialog généré par pyuic5 à partir de resources/ui/backup_restore_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.backup_restore_dialog_ui import Ui_BackupRestoreDialog

class BackupRestoreDialog(QtWidgets.QDialog, Ui_BackupRestoreDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        self.buttonBrowse.clicked.connect(self.browse_file)

    def browse_file(self):
        fname, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Sélectionner une sauvegarde", "", "Fichiers ZIP (*.zip);;Tous les fichiers (*)")
        if fname:
            self.editBackupPath.setText(fname)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/backup_restore_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/backup_restore_dialog.ui
Classe : Ui_BackupRestoreDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_BackupRestoreDialog(object):
    def setupUi(self, BackupRestoreDialog):
        BackupRestoreDialog.setObjectName("BackupRestoreDialog")
        BackupRestoreDialog.resize(420, 140)
        self.verticalLayout = QtWidgets.QVBoxLayout(BackupRestoreDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editBackupPath = QtWidgets.QLineEdit(BackupRestoreDialog)
        self.formLayout.addRow("Chemin du fichier de sauvegarde :", self.editBackupPath)
        self.buttonBrowse = QtWidgets.QPushButton(BackupRestoreDialog)
        self.buttonBrowse.setText("Parcourir...")
        self.formLayout.addRow(self.buttonBrowse)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(BackupRestoreDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/backup_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/backup_tab.py
Rôle : Onglet sauvegarde/restauration (BackupTab) du Club Manager.
Hérite de QWidget et de Ui_BackupTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_BackupTab généré par pyuic5 à partir de resources/ui/backup_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.backup_tab_ui import Ui_BackupTab
from club_manager.core.backup import backup_database, restore_database, export_zip_archive, import_zip_archive

class BackupTab(QtWidgets.QWidget, Ui_BackupTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBackup.clicked.connect(self.start_backup)
        self.buttonRestore.clicked.connect(self.start_restore)
        self.buttonExportZip.clicked.connect(self.start_export_zip)
        self.buttonImportZip.clicked.connect(self.start_import_zip)

    def start_backup(self):
        # Sauvegarde manuelle de la base
        backup_database("club_manager.db", parent=self)

    def start_restore(self):
        # Restauration d'une sauvegarde
        restore_database(parent=self)

    def start_export_zip(self):
        # Export complet (archive zip)
        export_zip_archive(parent=self)

    def start_import_zip(self):
        # Import complet (archive zip)
        import_zip_archive(parent=self)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/backup_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/backup_tab.ui
Classe : Ui_BackupTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_BackupTab(object):
    def setupUi(self, BackupTab):
        BackupTab.setObjectName("BackupTab")
        BackupTab.resize(600, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(BackupTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonBackup = QtWidgets.QPushButton(BackupTab)
        self.buttonBackup.setText("Sauvegarder")
        self.buttonRestore = QtWidgets.QPushButton(BackupTab)
        self.buttonRestore.setText("Restaurer")
        self.buttonExportZip = QtWidgets.QPushButton(BackupTab)
        self.buttonExportZip.setText("Exporter (zip)")
        self.buttonImportZip = QtWidgets.QPushButton(BackupTab)
        self.buttonImportZip.setText("Importer (zip)")
        self.horizontalLayoutTop.addWidget(self.buttonBackup)
        self.horizontalLayoutTop.addWidget(self.buttonRestore)
        self.horizontalLayoutTop.addWidget(self.buttonExportZip)
        self.horizontalLayoutTop.addWidget(self.buttonImportZip)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.labelLastBackup = QtWidgets.QLabel(BackupTab)
        self.labelLastBackup.setText("Dernière sauvegarde : inconnue")
        self.verticalLayout.addWidget(self.labelLastBackup)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/confirmation_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/confirmation_dialog.py
Rôle : Fenêtre modale de confirmation (suppression, actions critiques).
Hérite de QDialog et Ui_ConfirmationDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ConfirmationDialog généré par pyuic5 à partir de resources/ui/confirmation_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.confirmation_dialog_ui import Ui_ConfirmationDialog

class ConfirmationDialog(QtWidgets.QDialog, Ui_ConfirmationDialog):
    def __init__(self, parent=None, message="Confirmer l'action ?"):
        super().__init__(parent)
        self.setupUi(self)
        self.labelMessage.setText(message)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/confirmation_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/confirmation_dialog.ui
Classe : Ui_ConfirmationDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ConfirmationDialog(object):
    def setupUi(self, ConfirmationDialog):
        ConfirmationDialog.setObjectName("ConfirmationDialog")
        ConfirmationDialog.resize(340, 120)
        self.verticalLayout = QtWidgets.QVBoxLayout(ConfirmationDialog)
        self.labelMessage = QtWidgets.QLabel(ConfirmationDialog)
        self.labelMessage.setText("Confirmer l'action ?")
        self.labelMessage.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelMessage)
        self.buttonBox = QtWidgets.QDialogButtonBox(ConfirmationDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/cotisations_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/cotisations_tab.py
Rôle : Onglet gestion des cotisations (CotisationsTab) du Club Manager.
Hérite de QWidget et de Ui_CotisationsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CotisationsTab généré par pyuic5 à partir de resources/ui/cotisations_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.cotisations_tab_ui import Ui_CotisationsTab

class CotisationsTab(QtWidgets.QWidget, Ui_CotisationsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddCotisation.clicked.connect(self.add_cotisation)
        self.buttonEditCotisation.clicked.connect(self.edit_cotisation)
        self.buttonDeleteCotisation.clicked.connect(self.delete_cotisation)
        self.buttonExportCotisations.clicked.connect(self.export_cotisations)
        self.tableCotisations.doubleClicked.connect(self.edit_cotisation)
        self.buttonRelance.clicked.connect(self.relance_cotisation)

    def add_cotisation(self):
        from club_manager.ui.cotisation_form_dialog import CotisationFormDialog
        dlg = CotisationFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_cotisations()

    def edit_cotisation(self):
        # Logique de modification de la cotisation sélectionnée
        pass

    def delete_cotisation(self):
        # Logique de suppression de la/des cotisations sélectionnées
        pass

    def export_cotisations(self):
        # Exporter les cotisations
        pass

    def relance_cotisation(self):
        # Relancer les membres en retard de paiement
        pass

    def refresh_cotisations(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/cotisations_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/cotisations_tab.ui
Classe : Ui_CotisationsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CotisationsTab(object):
    def setupUi(self, CotisationsTab):
        CotisationsTab.setObjectName("CotisationsTab")
        CotisationsTab.resize(800, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(CotisationsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddCotisation = QtWidgets.QPushButton(CotisationsTab)
        self.buttonAddCotisation.setText("Ajouter")
        self.buttonEditCotisation = QtWidgets.QPushButton(CotisationsTab)
        self.buttonEditCotisation.setText("Modifier")
        self.buttonDeleteCotisation = QtWidgets.QPushButton(CotisationsTab)
        self.buttonDeleteCotisation.setText("Supprimer")
        self.buttonExportCotisations = QtWidgets.QPushButton(CotisationsTab)
        self.buttonExportCotisations.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddCotisation)
        self.horizontalLayoutTop.addWidget(self.buttonEditCotisation)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteCotisation)
        self.horizontalLayoutTop.addWidget(self.buttonExportCotisations)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableCotisations = QtWidgets.QTableWidget(CotisationsTab)
        self.tableCotisations.setColumnCount(7)
        self.tableCotisations.setHorizontalHeaderLabels([
            "Membre", "Session", "Montant", "Payé", "Date", "Méthode", "Statut"
        ])
        self.verticalLayout.addWidget(self.tableCotisations)
        self.buttonRelance = QtWidgets.QPushButton(CotisationsTab)
        self.buttonRelance.setText("Relancer les adhérents en retard")
        self.verticalLayout.addWidget(self.buttonRelance)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/cotisation_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/cotisation_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition de cotisation.
Hérite de QDialog et Ui_CotisationFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CotisationFormDialog généré par pyuic5 à partir de resources/ui/cotisation_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.cotisation_form_dialog_ui import Ui_CotisationFormDialog

class CotisationFormDialog(QtWidgets.QDialog, Ui_CotisationFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

    def accept(self):
        # Validation minimal
        if not self.editMember.text() or not self.editSession.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Membre et session obligatoires.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/cotisation_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/cotisation_form_dialog.ui
Classe : Ui_CotisationFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CotisationFormDialog(object):
    def setupUi(self, CotisationFormDialog):
        CotisationFormDialog.setObjectName("CotisationFormDialog")
        CotisationFormDialog.resize(400, 260)
        self.verticalLayout = QtWidgets.QVBoxLayout(CotisationFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editMember = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Membre :", self.editMember)
        self.editSession = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Session :", self.editSession)
        self.editAmount = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Montant :", self.editAmount)
        self.editPaid = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Payé :", self.editPaid)
        self.datePaiement = QtWidgets.QDateEdit(CotisationFormDialog)
        self.datePaiement.setCalendarPopup(True)
        self.formLayout.addRow("Date paiement :", self.datePaiement)
        self.comboMethod = QtWidgets.QComboBox(CotisationFormDialog)
        self.comboMethod.addItems(["Chèque", "Espèce", "ANCV", "Virement", "Autre"])
        self.formLayout.addRow("Méthode :", self.comboMethod)
        self.comboStatus = QtWidgets.QComboBox(CotisationFormDialog)
        self.comboStatus.addItems(["Payé", "En attente", "Partiel", "Relancé"])
        self.formLayout.addRow("Statut :", self.comboStatus)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(CotisationFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/custom_fields_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/custom_fields_tab.py
Rôle : Onglet gestion des champs personnalisés (CustomFieldsTab) du Club Manager.
Hérite de QWidget et de Ui_CustomFieldsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CustomFieldsTab généré par pyuic5 à partir de resources/ui/custom_fields_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.custom_fields_tab_ui import Ui_CustomFieldsTab

class CustomFieldsTab(QtWidgets.QWidget, Ui_CustomFieldsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddCustomField.clicked.connect(self.add_custom_field)
        self.buttonEditCustomField.clicked.connect(self.edit_custom_field)
        self.buttonDeleteCustomField.clicked.connect(self.delete_custom_field)
        self.buttonExportCustomFields.clicked.connect(self.export_custom_fields)
        self.tableCustomFields.doubleClicked.connect(self.edit_custom_field)

    def add_custom_field(self):
        from club_manager.ui.custom_field_form_dialog import CustomFieldFormDialog
        dlg = CustomFieldFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_custom_fields()

    def edit_custom_field(self):
        # Logique de modification du champ personnalisé sélectionné
        pass

    def delete_custom_field(self):
        # Logique de suppression du/des champs personnalisés sélectionnés
        pass

    def export_custom_fields(self):
        # Exporter les champs personnalisés
        pass

    def refresh_custom_fields(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/custom_fields_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/custom_fields_tab.ui
Classe : Ui_CustomFieldsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CustomFieldsTab(object):
    def setupUi(self, CustomFieldsTab):
        CustomFieldsTab.setObjectName("CustomFieldsTab")
        CustomFieldsTab.resize(700, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(CustomFieldsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddCustomField = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonAddCustomField.setText("Ajouter")
        self.buttonEditCustomField = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonEditCustomField.setText("Modifier")
        self.buttonDeleteCustomField = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonDeleteCustomField.setText("Supprimer")
        self.buttonExportCustomFields = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonExportCustomFields.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddCustomField)
        self.horizontalLayoutTop.addWidget(self.buttonEditCustomField)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteCustomField)
        self.horizontalLayoutTop.addWidget(self.buttonExportCustomFields)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableCustomFields = QtWidgets.QTableWidget(CustomFieldsTab)
        self.tableCustomFields.setColumnCount(4)
        self.tableCustomFields.setHorizontalHeaderLabels([
            "Nom", "Type", "Défaut", "Contraintes"
        ])
        self.verticalLayout.addWidget(self.tableCustomFields)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/custom_field_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/custom_field_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition de champ personnalisé.
Hérite de QDialog et Ui_CustomFieldFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CustomFieldFormDialog généré par pyuic5 à partir de resources/ui/custom_field_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.custom_field_form_dialog_ui import Ui_CustomFieldFormDialog

class CustomFieldFormDialog(QtWidgets.QDialog, Ui_CustomFieldFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # Connexion : type change => options dynamiques
        self.comboType.currentTextChanged.connect(self.change_type)

    def change_type(self, type_str):
        # Afficher/masquer options selon type
        if type_str == "Choix":
            self.editOptions.setEnabled(True)
        else:
            self.editOptions.setEnabled(False)
            self.editOptions.clear()

    def accept(self):
        # Validation minimal
        if not self.editName.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Le nom du champ est obligatoire.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/custom_field_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/custom_field_form_dialog.ui
Classe : Ui_CustomFieldFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CustomFieldFormDialog(object):
    def setupUi(self, CustomFieldFormDialog):
        CustomFieldFormDialog.setObjectName("CustomFieldFormDialog")
        CustomFieldFormDialog.resize(400, 230)
        self.verticalLayout = QtWidgets.QVBoxLayout(CustomFieldFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editName = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.formLayout.addRow("Nom du champ :", self.editName)
        self.comboType = QtWidgets.QComboBox(CustomFieldFormDialog)
        self.comboType.addItems(["Texte", "Numérique", "Date", "Choix", "Booléen"])
        self.formLayout.addRow("Type :", self.comboType)
        self.editDefault = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.formLayout.addRow("Valeur par défaut :", self.editDefault)
        self.editOptions = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.editOptions.setPlaceholderText("Séparés par virgules")
        self.editOptions.setEnabled(False)
        self.formLayout.addRow("Options (si Choix) :", self.editOptions)
        self.editConstraints = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.formLayout.addRow("Contraintes :", self.editConstraints)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(CustomFieldFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/doc_viewer_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/doc_viewer_dialog.py
Rôle : Fenêtre modale de visualisation de la documentation embarquée.
Hérite de QDialog et Ui_DocViewerDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_DocViewerDialog généré par pyuic5 à partir de resources/ui/doc_viewer_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.doc_viewer_dialog_ui import Ui_DocViewerDialog

class DocViewerDialog(QtWidgets.QDialog, Ui_DocViewerDialog):
    def __init__(self, parent=None, html_content=""):
        super().__init__(parent)
        self.setupUi(self)
        self.textBrowser.setHtml(html_content)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/doc_viewer_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/doc_viewer_dialog.ui
Classe : Ui_DocViewerDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_DocViewerDialog(object):
    def setupUi(self, DocViewerDialog):
        DocViewerDialog.setObjectName("DocViewerDialog")
        DocViewerDialog.resize(600, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(DocViewerDialog)
        self.textBrowser = QtWidgets.QTextBrowser(DocViewerDialog)
        self.verticalLayout.addWidget(self.textBrowser)
        self.buttonBox = QtWidgets.QDialogButtonBox(DocViewerDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/error_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/error_dialog.py
Rôle : Fenêtre modale d'affichage d'une erreur critique ou bloquante.
Hérite de QDialog et Ui_ErrorDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ErrorDialog généré par pyuic5 à partir de resources/ui/error_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.error_dialog_ui import Ui_ErrorDialog

class ErrorDialog(QtWidgets.QDialog, Ui_ErrorDialog):
    def __init__(self, parent=None, error_message="Une erreur est survenue."):
        super().__init__(parent)
        self.setupUi(self)
        self.labelError.setText(error_message)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/error_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/error_dialog.ui
Classe : Ui_ErrorDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ErrorDialog(object):
    def setupUi(self, ErrorDialog):
        ErrorDialog.setObjectName("ErrorDialog")
        ErrorDialog.resize(420, 140)
        self.verticalLayout = QtWidgets.QVBoxLayout(ErrorDialog)
        self.labelError = QtWidgets.QLabel(ErrorDialog)
        self.labelError.setText("Une erreur est survenue.")
        self.labelError.setAlignment(QtCore.Qt.AlignCenter)
        self.labelError.setWordWrap(True)
        self.verticalLayout.addWidget(self.labelError)
        self.buttonBox = QtWidgets.QDialogButtonBox(ErrorDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/exports_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/exports_tab.py
Rôle : Onglet exports (ExportsTab) du Club Manager.
Hérite de QWidget et de Ui_ExportsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ExportsTab généré par pyuic5 à partir de resources/ui/exports_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.exports_tab_ui import Ui_ExportsTab

class ExportsTab(QtWidgets.QWidget, Ui_ExportsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonExportCSV.clicked.connect(self.export_csv)
        self.buttonExportPDF.clicked.connect(self.export_pdf)
        self.buttonSelectFields.clicked.connect(self.select_fields)

    def export_csv(self):
        # Exporter les données en CSV
        pass

    def export_pdf(self):
        # Exporter les données en PDF
        pass

    def select_fields(self):
        # Ouvrir un dialog pour sélectionner les champs à exporter
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/exports_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/exports_tab.ui
Classe : Ui_ExportsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ExportsTab(object):
    def setupUi(self, ExportsTab):
        ExportsTab.setObjectName("ExportsTab")
        ExportsTab.resize(700, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(ExportsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonExportCSV = QtWidgets.QPushButton(ExportsTab)
        self.buttonExportCSV.setText("Exporter CSV")
        self.buttonExportPDF = QtWidgets.QPushButton(ExportsTab)
        self.buttonExportPDF.setText("Exporter PDF")
        self.buttonSelectFields = QtWidgets.QPushButton(ExportsTab)
        self.buttonSelectFields.setText("Champs à exporter")
        self.horizontalLayoutTop.addWidget(self.buttonExportCSV)
        self.horizontalLayoutTop.addWidget(self.buttonExportPDF)
        self.horizontalLayoutTop.addWidget(self.buttonSelectFields)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tablePreview = QtWidgets.QTableWidget(ExportsTab)
        self.tablePreview.setColumnCount(0)
        self.tablePreview.setRowCount(0)
        self.verticalLayout.addWidget(self.tablePreview)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/export_fields_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/export_fields_dialog.py
Rôle : Fenêtre modale de sélection des champs à exporter.
Hérite de QDialog et Ui_ExportFieldsDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ExportFieldsDialog généré par pyuic5 à partir de resources/ui/export_fields_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.export_fields_dialog_ui import Ui_ExportFieldsDialog

class ExportFieldsDialog(QtWidgets.QDialog, Ui_ExportFieldsDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # Connexion logique si besoin
        self.checkAllFields.toggled.connect(self.toggle_all_fields)

    def toggle_all_fields(self, checked):
        for i in range(self.listFields.count()):
            item = self.listFields.item(i)
            item.setCheckState(QtCore.Qt.Checked if checked else QtCore.Qt.Unchecked)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/export_fields_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/export_fields_dialog.ui
Classe : Ui_ExportFieldsDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ExportFieldsDialog(object):
    def setupUi(self, ExportFieldsDialog):
        ExportFieldsDialog.setObjectName("ExportFieldsDialog")
        ExportFieldsDialog.resize(350, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(ExportFieldsDialog)
        self.checkAllFields = QtWidgets.QCheckBox(ExportFieldsDialog)
        self.checkAllFields.setText("Tout sélectionner")
        self.verticalLayout.addWidget(self.checkAllFields)
        self.listFields = QtWidgets.QListWidget(ExportFieldsDialog)
        self.listFields.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.verticalLayout.addWidget(self.listFields)
        self.buttonBox = QtWidgets.QDialogButtonBox(ExportFieldsDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/mailing_recipients_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/mailing_recipients_dialog.py
Rôle : Fenêtre modale de sélection des destinataires du mailing.
Hérite de QDialog et Ui_MailingRecipientsDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_MailingRecipientsDialog généré par pyuic5 à partir de resources/ui/mailing_recipients_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.mailing_recipients_dialog_ui import Ui_MailingRecipientsDialog

class MailingRecipientsDialog(QtWidgets.QDialog, Ui_MailingRecipientsDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # TODO: wiring logique sélection/désélection groupée si besoin
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/mailing_recipients_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/mailing_recipients_dialog.ui
Classe : Ui_MailingRecipientsDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MailingRecipientsDialog(object):
    def setupUi(self, MailingRecipientsDialog):
        MailingRecipientsDialog.setObjectName("MailingRecipientsDialog")
        MailingRecipientsDialog.resize(400, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(MailingRecipientsDialog)
        self.labelInfo = QtWidgets.QLabel(MailingRecipientsDialog)
        self.labelInfo.setText("Sélectionnez les destinataires du mailing :")
        self.verticalLayout.addWidget(self.labelInfo)
        self.listRecipients = QtWidgets.QListWidget(MailingRecipientsDialog)
        self.listRecipients.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.verticalLayout.addWidget(self.listRecipients)
        self.buttonBox = QtWidgets.QDialogButtonBox(MailingRecipientsDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/mailing_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/mailing_tab.py
Rôle : Onglet mailing (MailingTab) du Club Manager.
Hérite de QWidget et de Ui_MailingTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_MailingTab généré par pyuic5 à partir de resources/ui/mailing_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.mailing_tab_ui import Ui_MailingTab

class MailingTab(QtWidgets.QWidget, Ui_MailingTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonSendMail.clicked.connect(self.send_mail)
        self.buttonPreviewMail.clicked.connect(self.preview_mail)
        self.buttonSelectRecipients.clicked.connect(self.select_recipients)

    def send_mail(self):
        # Logique d'envoi de mail groupé
        pass

    def preview_mail(self):
        # Afficher un aperçu du mail groupé
        pass

    def select_recipients(self):
        # Sélectionner les destinataires (ouvre un dialog)
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/mailing_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/mailing_tab.ui
Classe : Ui_MailingTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MailingTab(object):
    def setupUi(self, MailingTab):
        MailingTab.setObjectName("MailingTab")
        MailingTab.resize(700, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(MailingTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonSendMail = QtWidgets.QPushButton(MailingTab)
        self.buttonSendMail.setText("Envoyer")
        self.buttonPreviewMail = QtWidgets.QPushButton(MailingTab)
        self.buttonPreviewMail.setText("Prévisualiser")
        self.buttonSelectRecipients = QtWidgets.QPushButton(MailingTab)
        self.buttonSelectRecipients.setText("Sélection destinataires")
        self.horizontalLayoutTop.addWidget(self.buttonSendMail)
        self.horizontalLayoutTop.addWidget(self.buttonPreviewMail)
        self.horizontalLayoutTop.addWidget(self.buttonSelectRecipients)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.textEditMail = QtWidgets.QTextEdit(MailingTab)
        self.textEditMail.setPlaceholderText("Rédigez votre message ici...")
        self.verticalLayout.addWidget(self.textEditMail)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/main_window.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/main_window.py
Rôle : Fenêtre principale du Club Manager.
Correction PRIORITAIRE : Ajout explicite des widgets métiers dans chaque onglet du QTabWidget.
Points clés :
- Charge main_window.ui (QTabWidget principal)
- Instancie et insère chaque widget métier (MembersTab, PositionsTab, SessionsTab, CotisationsTab, CustomFieldsTab, AuditTab, etc.)
- Garantit que chaque bouton/action de chaque onglet est pleinement fonctionnel (slots connectés)
- Connexions menu (quitter, audit, RGPD, doc...) opérationnelles
- AUCUN widget global, respect cycle de vie QApplication
- PyQt5, Python 3.8+, PEP8, code prêt à coller/remplacer

Dépendances (pip install):
- PyQt5
"""

import sys
import logging
from PyQt5 import QtWidgets
from PyQt5.uic import loadUi

# Imports explicites des widgets métiers (chaque module .py/.ui doit exister et être correct)
from club_manager.ui.members_tab import MembersTab
from club_manager.ui.positions_tab import PositionsTab
from club_manager.ui.sessions_tab import SessionsTab
from club_manager.ui.cotisations_tab import CotisationsTab
from club_manager.ui.custom_fields_tab import CustomFieldsTab
from club_manager.ui.audit_tab import AuditTab
from club_manager.ui.exports_tab import ExportsTab
from club_manager.ui.mailing_tab import MailingTab
from club_manager.ui.theming_tab import ThemingTab
from club_manager.ui.backup_tab import BackupTab

# Optionnel : extensions/fenêtres modales
from club_manager.ui.member_form_dialog import MemberFormDialog
from club_manager.ui.position_form_dialog import PositionFormDialog
from club_manager.ui.session_form_dialog import SessionFormDialog
from club_manager.ui.cotisation_form_dialog import CotisationFormDialog
from club_manager.ui.custom_field_form_dialog import CustomFieldFormDialog

# Gestion i18n centralisée
from club_manager.i18n import setup_translations, switch_language, get_translator

class MainWindow(QtWidgets.QMainWindow):
    """
    Fenêtre principale de l'application Club Manager.
    Gère l'affichage et l'injection dynamique de tous les widgets métiers dans le QTabWidget.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Chargement de l'UI principale (main_window.ui)
        try:
            loadUi("resources/ui/main_window.ui", self)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Erreur UI", f"Impossible de charger l'UI principale : {e}")
            logging.exception("Erreur lors du chargement de main_window.ui")
            sys.exit(1)

        # Injection explicite des widgets métiers dans chaque onglet du QTabWidget
        try:
            # Onglet Membres (index 0)
            self.members_tab = MembersTab(self)
            self._replace_tab_widget(0, self.members_tab)

            # Onglet Postes (index 1)
            self.positions_tab = PositionsTab(self)
            self._replace_tab_widget(1, self.positions_tab)

            # Onglet Sessions (index 2)
            self.sessions_tab = SessionsTab(self)
            self._replace_tab_widget(2, self.sessions_tab)

            # Onglet Cotisations (index 3)
            self.cotisations_tab = CotisationsTab(self)
            self._replace_tab_widget(3, self.cotisations_tab)

            # Onglet Champs personnalisés (index 4)
            self.custom_fields_tab = CustomFieldsTab(self)
            self._replace_tab_widget(4, self.custom_fields_tab)

            # Onglet Audit (index 5)
            self.audit_tab = AuditTab(self)
            self._replace_tab_widget(5, self.audit_tab)

            # Onglet Exports (index 6)
            self.exports_tab = ExportsTab(self)
            self._replace_tab_widget(6, self.exports_tab)

            # Onglet Mailing (index 7)
            self.mailing_tab = MailingTab(self)
            self._replace_tab_widget(7, self.mailing_tab)

            # Onglet Thématisation (index 8)
            self.theming_tab = ThemingTab(self)
            self._replace_tab_widget(8, self.theming_tab)

            # Onglet Sauvegarde/Restaurer (index 9)
            self.backup_tab = BackupTab(self)
            self._replace_tab_widget(9, self.backup_tab)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Erreur", f"Erreur lors de l'injection des widgets métiers : {e}")
            logging.exception("Erreur lors de l'injection des widgets métiers")
            sys.exit(1)

        # Connexions des actions du menu principal
        self._connect_menu_actions()

    def _replace_tab_widget(self, tab_index: int, widget: QtWidgets.QWidget):
        """
        Remplace le contenu d'un onglet du QTabWidget par un widget métier custom.
        """
        tab = self.tabWidget.widget(tab_index)
        # On nettoie le layout existant (si nécessaire)
        if tab.layout() is None:
            layout = QtWidgets.QVBoxLayout(tab)
            tab.setLayout(layout)
        else:
            layout = tab.layout()
            # On retire les widgets existants
            while layout.count():
                child = layout.takeAt(0)
                if child.widget():
                    child.widget().setParent(None)
        layout.addWidget(widget)

    def _connect_menu_actions(self):
        """
        Connexion de tous les menus/actions principaux.
        Les actions doivent exister dans le .ui (sinon, générer le .ui correspondant).
        """
        try:
            # Action Quitter
            self.actionQuitter.triggered.connect(self.close)
            # Action Audit : afficher l'onglet Audit
            self.actionAudit.triggered.connect(lambda: self.tabWidget.setCurrentIndex(5))
            # Action RGPD : afficher la documentation RGPD ou ouvrir la boîte de dialogue RGPD
            self.actionRGPD.triggered.connect(self._open_rgpd_dialog)
            # Action Documentation : ouvrir la doc utilisateur
            self.actionDocumentation.triggered.connect(self._open_documentation)
            # Action Sauvegarde : switch onglet
            self.actionSauvegarder.triggered.connect(lambda: self.tabWidget.setCurrentIndex(9))
            # Action Thème : switch onglet
            self.actionTheme.triggered.connect(lambda: self.tabWidget.setCurrentIndex(8))
            # Action Export : switch onglet
            self.actionExporter.triggered.connect(lambda: self.tabWidget.setCurrentIndex(6))
            # Action Mailing : switch onglet
            self.actionMailing.triggered.connect(lambda: self.tabWidget.setCurrentIndex(7))
            # Action Changer de langue
            self.actionChanger_de_langue.triggered.connect(self._switch_language)
        except Exception as e:
            logging.warning(f"Erreur lors de la connexion des actions de menu : {e}")

    def _open_rgpd_dialog(self):
        QtWidgets.QMessageBox.information(self, "RGPD", "Documentation RGPD et options de purge/anonymisation.")

    def _open_documentation(self):
        QtWidgets.QMessageBox.information(self, "Documentation", "Ouvrir la documentation utilisateur/de développement.")

    def _switch_language(self):
        try:
            switch_language()
            QtWidgets.QMessageBox.information(self, "Langue", "Langue changée. Veuillez redémarrer l'application pour que tous les changements prennent effet.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "Erreur langue", f"Impossible de changer la langue : {e}")

# Guide d'extension :
# - Pour ajouter un nouvel onglet, créer le couple club_manager/ui/{nom}_tab.py + resources/ui/{nom}_tab.ui
# - Importer ici, instancier, puis appeler self._replace_tab_widget(nouvel_index, nouvel_objet)
# - Ajouter l'action de menu associée dans le .ui et la connecter dans _connect_menu_actions

```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/members_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/members_tab.py
Rôle : Onglet gestion des adhérents (MembersTab) du Club Manager.
Hérite de QWidget et de Ui_MembersTab.
Tous les boutons/actions sont connectés à des slots effectifs dans la classe.
Dépendances : PyQt5, Ui_MembersTab généré par pyuic5 à partir de resources/ui/members_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.members_tab_ui import Ui_MembersTab

class MembersTab(QtWidgets.QWidget, Ui_MembersTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        # Connexion des boutons du tab à leur logique
        self.buttonAddMember.clicked.connect(self.add_member)
        self.buttonEditMember.clicked.connect(self.edit_member)
        self.buttonDeleteMember.clicked.connect(self.delete_member)
        self.buttonExportMembers.clicked.connect(self.export_members)
        self.buttonFilter.clicked.connect(self.filter_members)
        self.buttonResetFilter.clicked.connect(self.reset_filter)
        self.buttonMailing.clicked.connect(self.do_mailing)
        self.tableMembers.doubleClicked.connect(self.edit_member)
        # TODO : Connexions additionnelles selon les besoins

    def add_member(self):
        # Logique d'ajout d'un adhérent (ouvre le dialog)
        from club_manager.ui.member_form_dialog import MemberFormDialog
        dlg = MemberFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            # Ajout effectif du membre, recharge table
            self.refresh_members()
    
    def edit_member(self):
        # Logique de modification d'un adhérent sélectionné
        # TODO: Récupérer l'ID du membre sélectionné
        pass

    def delete_member(self):
        # Logique de suppression d'un ou plusieurs membres sélectionnés
        pass

    def export_members(self):
        # Logique d'export CSV/PDF de la liste actuelle
        pass

    def filter_members(self):
        # Logique de filtrage multicritère
        pass

    def reset_filter(self):
        # Réinitialise tous les filtres
        pass

    def do_mailing(self):
        # Lancer le module de mailing sur sélection
        pass

    def refresh_members(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/members_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/members_tab.ui
Classe : Ui_MembersTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MembersTab(object):
    def setupUi(self, MembersTab):
        MembersTab.setObjectName("MembersTab")
        MembersTab.resize(900, 600)
        self.verticalLayout = QtWidgets.QVBoxLayout(MembersTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddMember = QtWidgets.QPushButton(MembersTab)
        self.buttonAddMember.setText("Ajouter")
        self.buttonEditMember = QtWidgets.QPushButton(MembersTab)
        self.buttonEditMember.setText("Modifier")
        self.buttonDeleteMember = QtWidgets.QPushButton(MembersTab)
        self.buttonDeleteMember.setText("Supprimer")
        self.buttonExportMembers = QtWidgets.QPushButton(MembersTab)
        self.buttonExportMembers.setText("Exporter")
        self.buttonMailing = QtWidgets.QPushButton(MembersTab)
        self.buttonMailing.setText("Mailing")
        self.horizontalLayoutTop.addWidget(self.buttonAddMember)
        self.horizontalLayoutTop.addWidget(self.buttonEditMember)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteMember)
        self.horizontalLayoutTop.addWidget(self.buttonExportMembers)
        self.horizontalLayoutTop.addWidget(self.buttonMailing)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableMembers = QtWidgets.QTableWidget(MembersTab)
        self.tableMembers.setColumnCount(10)
        self.tableMembers.setHorizontalHeaderLabels([
            "Nom", "Prénom", "Adresse", "CP", "Ville", "Tél", "Mail", "RGPD", "Droit image", "Cotisation"
        ])
        self.verticalLayout.addWidget(self.tableMembers)
        self.horizontalLayoutFilter = QtWidgets.QHBoxLayout()
        self.buttonFilter = QtWidgets.QPushButton(MembersTab)
        self.buttonFilter.setText("Filtrer")
        self.buttonResetFilter = QtWidgets.QPushButton(MembersTab)
        self.buttonResetFilter.setText("Réinitialiser")
        self.horizontalLayoutFilter.addWidget(self.buttonFilter)
        self.horizontalLayoutFilter.addWidget(self.buttonResetFilter)
        self.verticalLayout.addLayout(self.horizontalLayoutFilter)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/member_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/member_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition d'adhérent.
Hérite de QDialog et Ui_MemberFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_MemberFormDialog généré par pyuic5 à partir de resources/ui/member_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.member_form_dialog_ui import Ui_MemberFormDialog

class MemberFormDialog(QtWidgets.QDialog, Ui_MemberFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # Connexions logiques live :
        self.checkMultiClub.toggled.connect(self.toggle_multi_club_fields)
        self.checkMJCElsewhere.toggled.connect(self.toggle_mjc_elsewhere_fields)

    def toggle_multi_club_fields(self, checked):
        self.editExternalClub.setEnabled(checked)
        if not checked:
            self.editExternalClub.clear()

    def toggle_mjc_elsewhere_fields(self, checked):
        self.editMJCClub.setEnabled(checked)
        if not checked:
            self.editMJCClub.clear()

    def accept(self):
        # TODO: validation des champs, RGPD, etc.
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/member_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/member_form_dialog.ui
Classe : Ui_MemberFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MemberFormDialog(object):
    def setupUi(self, MemberFormDialog):
        MemberFormDialog.setObjectName("MemberFormDialog")
        MemberFormDialog.resize(600, 700)
        self.verticalLayout = QtWidgets.QVBoxLayout(MemberFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editLastName = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Nom :", self.editLastName)
        self.editFirstName = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Prénom :", self.editFirstName)
        self.editAddress = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Adresse :", self.editAddress)
        self.editPostalCode = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Code postal :", self.editPostalCode)
        self.editCity = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Ville :", self.editCity)
        self.editPhone = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("N° de tél. :", self.editPhone)
        self.editMail = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Mail :", self.editMail)
        self.checkRGPD = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkRGPD.setText("Consentement RGPD (obligatoire)")
        self.formLayout.addRow(self.checkRGPD)
        self.checkImageRights = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkImageRights.setText("Droit à l'image accepté")
        self.formLayout.addRow(self.checkImageRights)
        self.editHealth = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Fiche santé :", self.editHealth)
        self.checkANCV = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkANCV.setText("Paiement ANCV")
        self.formLayout.addRow(self.checkANCV)
        self.editCash = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Espèce :", self.editCash)
        self.editCheque1 = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Chèque 1 :", self.editCheque1)
        self.editCheque2 = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Chèque 2 :", self.editCheque2)
        self.editCheque3 = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Chèque 3 :", self.editCheque3)
        self.editTotalPaid = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Total payé :", self.editTotalPaid)
        self.editClubPart = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Part adhésion club :", self.editClubPart)
        self.editMJCPart = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Part adhésion MJC :", self.editMJCPart)
        self.checkMultiClub = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkMultiClub.setText("Déjà membre d'un autre club")
        self.formLayout.addRow(self.checkMultiClub)
        self.editExternalClub = QtWidgets.QLineEdit(MemberFormDialog)
        self.editExternalClub.setPlaceholderText("Nom du club externe")
        self.editExternalClub.setEnabled(False)
        self.formLayout.addRow("Club externe :", self.editExternalClub)
        self.checkMJCElsewhere = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkMJCElsewhere.setText("Part MJC déjà réglée ailleurs")
        self.formLayout.addRow(self.checkMJCElsewhere)
        self.editMJCClub = QtWidgets.QLineEdit(MemberFormDialog)
        self.editMJCClub.setPlaceholderText("Nom du club où la part MJC a été réglée")
        self.editMJCClub.setEnabled(False)
        self.formLayout.addRow("Club MJC réglé :", self.editMJCClub)
        self.buttonBox = QtWidgets.QDialogButtonBox(MemberFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addLayout(self.formLayout)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/positions_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/positions_tab.py
Rôle : Onglet gestion des postes (PositionsTab) du Club Manager.
Hérite de QWidget et de Ui_PositionsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_PositionsTab généré par pyuic5 à partir de resources/ui/positions_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.positions_tab_ui import Ui_PositionsTab

class PositionsTab(QtWidgets.QWidget, Ui_PositionsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddPosition.clicked.connect(self.add_position)
        self.buttonEditPosition.clicked.connect(self.edit_position)
        self.buttonDeletePosition.clicked.connect(self.delete_position)
        self.buttonExportPositions.clicked.connect(self.export_positions)
        self.tablePositions.doubleClicked.connect(self.edit_position)
        self.buttonAffect.clicked.connect(self.affect_position)
        self.buttonUnaffect.clicked.connect(self.unaffect_position)

    def add_position(self):
        from club_manager.ui.position_form_dialog import PositionFormDialog
        dlg = PositionFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_positions()

    def edit_position(self):
        # Logique de modification du poste sélectionné
        pass

    def delete_position(self):
        # Logique de suppression du/des postes sélectionnés
        pass

    def export_positions(self):
        # Exporter les postes
        pass

    def affect_position(self):
        # Affecter un poste à un membre
        pass

    def unaffect_position(self):
        # Désaffecter un poste d'un membre
        pass

    def refresh_positions(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/positions_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/positions_tab.ui
Classe : Ui_PositionsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_PositionsTab(object):
    def setupUi(self, PositionsTab):
        PositionsTab.setObjectName("PositionsTab")
        PositionsTab.resize(700, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(PositionsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddPosition = QtWidgets.QPushButton(PositionsTab)
        self.buttonAddPosition.setText("Ajouter")
        self.buttonEditPosition = QtWidgets.QPushButton(PositionsTab)
        self.buttonEditPosition.setText("Modifier")
        self.buttonDeletePosition = QtWidgets.QPushButton(PositionsTab)
        self.buttonDeletePosition.setText("Supprimer")
        self.buttonExportPositions = QtWidgets.QPushButton(PositionsTab)
        self.buttonExportPositions.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddPosition)
        self.horizontalLayoutTop.addWidget(self.buttonEditPosition)
        self.horizontalLayoutTop.addWidget(self.buttonDeletePosition)
        self.horizontalLayoutTop.addWidget(self.buttonExportPositions)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tablePositions = QtWidgets.QTableWidget(PositionsTab)
        self.tablePositions.setColumnCount(3)
        self.tablePositions.setHorizontalHeaderLabels([
            "Poste", "Type", "Affecté à"
        ])
        self.verticalLayout.addWidget(self.tablePositions)
        self.horizontalLayoutBottom = QtWidgets.QHBoxLayout()
        self.buttonAffect = QtWidgets.QPushButton(PositionsTab)
        self.buttonAffect.setText("Affecter à un membre")
        self.buttonUnaffect = QtWidgets.QPushButton(PositionsTab)
        self.buttonUnaffect.setText("Désaffecter")
        self.horizontalLayoutBottom.addWidget(self.buttonAffect)
        self.horizontalLayoutBottom.addWidget(self.buttonUnaffect)
        self.verticalLayout.addLayout(self.horizontalLayoutBottom)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/position_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/position_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition d'un poste.
Hérite de QDialog et Ui_PositionFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_PositionFormDialog généré par pyuic5 à partir de resources/ui/position_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.position_form_dialog_ui import Ui_PositionFormDialog

class PositionFormDialog(QtWidgets.QDialog, Ui_PositionFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # TODO: Ajoutez la logique de validation, etc.

    def accept(self):
        # Validation des champs (exemple minimal)
        if not self.editName.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Le nom du poste est obligatoire.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/position_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/position_form_dialog.ui
Classe : Ui_PositionFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_PositionFormDialog(object):
    def setupUi(self, PositionFormDialog):
        PositionFormDialog.setObjectName("PositionFormDialog")
        PositionFormDialog.resize(400, 200)
        self.verticalLayout = QtWidgets.QVBoxLayout(PositionFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editName = QtWidgets.QLineEdit(PositionFormDialog)
        self.formLayout.addRow("Nom du poste :", self.editName)
        self.comboType = QtWidgets.QComboBox(PositionFormDialog)
        self.comboType.addItems(["Staff", "Gestion", "Trésorier", "Président", "Autre"])
        self.formLayout.addRow("Type :", self.comboType)
        self.editDescription = QtWidgets.QLineEdit(PositionFormDialog)
        self.formLayout.addRow("Description :", self.editDescription)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(PositionFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/rgpd_purge_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/rgpd_purge_dialog.py
Rôle : Fenêtre modale pour lancer/valider la purge RGPD.
Hérite de QDialog et Ui_RgpdPurgeDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_RgpdPurgeDialog généré par pyuic5 à partir de resources/ui/rgpd_purge_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.rgpd_purge_dialog_ui import Ui_RgpdPurgeDialog

class RgpdPurgeDialog(QtWidgets.QDialog, Ui_RgpdPurgeDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/rgpd_purge_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/rgpd_purge_dialog.ui
Classe : Ui_RgpdPurgeDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_RgpdPurgeDialog(object):
    def setupUi(self, RgpdPurgeDialog):
        RgpdPurgeDialog.setObjectName("RgpdPurgeDialog")
        RgpdPurgeDialog.resize(420, 180)
        self.verticalLayout = QtWidgets.QVBoxLayout(RgpdPurgeDialog)
        self.labelWarning = QtWidgets.QLabel(RgpdPurgeDialog)
        self.labelWarning.setText(
            "<b>Attention !</b><br>Cet outil lance une purge/anonymisation RGPD irréversible.<br>Êtes-vous sûr de vouloir continuer ?"
        )
        self.labelWarning.setAlignment(QtCore.Qt.AlignCenter)
        self.labelWarning.setWordWrap(True)
        self.verticalLayout.addWidget(self.labelWarning)
        self.checkUnderstand = QtWidgets.QCheckBox(RgpdPurgeDialog)
        self.checkUnderstand.setText("J'ai compris les conséquences de cette action.")
        self.verticalLayout.addWidget(self.checkUnderstand)
        self.buttonBox = QtWidgets.QDialogButtonBox(RgpdPurgeDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/sessions_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/sessions_tab.py
Rôle : Onglet gestion des sessions (SessionsTab) du Club Manager.
Hérite de QWidget et de Ui_SessionsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_SessionsTab généré par pyuic5 à partir de resources/ui/sessions_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.sessions_tab_ui import Ui_SessionsTab

class SessionsTab(QtWidgets.QWidget, Ui_SessionsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddSession.clicked.connect(self.add_session)
        self.buttonEditSession.clicked.connect(self.edit_session)
        self.buttonDeleteSession.clicked.connect(self.delete_session)
        self.buttonExportSessions.clicked.connect(self.export_sessions)
        self.tableSessions.doubleClicked.connect(self.edit_session)
        self.buttonSetCurrent.clicked.connect(self.set_current_session)

    def add_session(self):
        from club_manager.ui.session_form_dialog import SessionFormDialog
        dlg = SessionFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_sessions()

    def edit_session(self):
        # Logique de modification de la session sélectionnée
        pass

    def delete_session(self):
        # Logique de suppression de la/des sessions sélectionnées
        pass

    def export_sessions(self):
        # Exporter les sessions
        pass

    def set_current_session(self):
        # Définir la session courante
        pass

    def refresh_sessions(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/sessions_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/sessions_tab.ui
Classe : Ui_SessionsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_SessionsTab(object):
    def setupUi(self, SessionsTab):
        SessionsTab.setObjectName("SessionsTab")
        SessionsTab.resize(700, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(SessionsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddSession = QtWidgets.QPushButton(SessionsTab)
        self.buttonAddSession.setText("Ajouter")
        self.buttonEditSession = QtWidgets.QPushButton(SessionsTab)
        self.buttonEditSession.setText("Modifier")
        self.buttonDeleteSession = QtWidgets.QPushButton(SessionsTab)
        self.buttonDeleteSession.setText("Supprimer")
        self.buttonExportSessions = QtWidgets.QPushButton(SessionsTab)
        self.buttonExportSessions.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddSession)
        self.horizontalLayoutTop.addWidget(self.buttonEditSession)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteSession)
        self.horizontalLayoutTop.addWidget(self.buttonExportSessions)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableSessions = QtWidgets.QTableWidget(SessionsTab)
        self.tableSessions.setColumnCount(4)
        self.tableSessions.setHorizontalHeaderLabels([
            "Nom", "Début", "Fin", "Courante"
        ])
        self.verticalLayout.addWidget(self.tableSessions)
        self.buttonSetCurrent = QtWidgets.QPushButton(SessionsTab)
        self.buttonSetCurrent.setText("Définir comme session courante")
        self.verticalLayout.addWidget(self.buttonSetCurrent)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/session_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/session_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition de session.
Hérite de QDialog et Ui_SessionFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_SessionFormDialog généré par pyuic5 à partir de resources/ui/session_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.session_form_dialog_ui import Ui_SessionFormDialog

class SessionFormDialog(QtWidgets.QDialog, Ui_SessionFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

    def accept(self):
        # Validation minimal
        if not self.editSessionName.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Le nom de la session est obligatoire.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/session_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/session_form_dialog.ui
Classe : Ui_SessionFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_SessionFormDialog(object):
    def setupUi(self, SessionFormDialog):
        SessionFormDialog.setObjectName("SessionFormDialog")
        SessionFormDialog.resize(400, 200)
        self.verticalLayout = QtWidgets.QVBoxLayout(SessionFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editSessionName = QtWidgets.QLineEdit(SessionFormDialog)
        self.formLayout.addRow("Nom de la session :", self.editSessionName)
        self.dateStart = QtWidgets.QDateEdit(SessionFormDialog)
        self.dateStart.setCalendarPopup(True)
        self.formLayout.addRow("Date début :", self.dateStart)
        self.dateEnd = QtWidgets.QDateEdit(SessionFormDialog)
        self.dateEnd.setCalendarPopup(True)
        self.formLayout.addRow("Date fin :", self.dateEnd)
        self.editClubAmount = QtWidgets.QLineEdit(SessionFormDialog)
        self.formLayout.addRow("Part club :", self.editClubAmount)
        self.editMJCAmount = QtWidgets.QLineEdit(SessionFormDialog)
        self.formLayout.addRow("Part MJC :", self.editMJCAmount)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(SessionFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/theming_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/theming_tab.py
Rôle : Onglet thématisation (ThemingTab) du Club Manager.
Hérite de QWidget et de Ui_ThemingTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ThemingTab généré par pyuic5 à partir de resources/ui/theming_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.theming_tab_ui import Ui_ThemingTab

class ThemingTab(QtWidgets.QWidget, Ui_ThemingTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonChooseTheme.clicked.connect(self.choose_theme)
        self.buttonImportLogo.clicked.connect(self.import_logo)
        self.buttonPreviewTheme.clicked.connect(self.preview_theme)

    def choose_theme(self):
        # Choisir un thème graphique
        pass

    def import_logo(self):
        # Importer un logo
        pass

    def preview_theme(self):
        # Prévisualiser le thème
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/theming_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/theming_tab.ui
Classe : Ui_ThemingTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ThemingTab(object):
    def setupUi(self, ThemingTab):
        ThemingTab.setObjectName("ThemingTab")
        ThemingTab.resize(600, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(ThemingTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonChooseTheme = QtWidgets.QPushButton(ThemingTab)
        self.buttonChooseTheme.setText("Choisir un thème")
        self.buttonImportLogo = QtWidgets.QPushButton(ThemingTab)
        self.buttonImportLogo.setText("Importer un logo")
        self.buttonPreviewTheme = QtWidgets.QPushButton(ThemingTab)
        self.buttonPreviewTheme.setText("Prévisualiser")
        self.horizontalLayoutTop.addWidget(self.buttonChooseTheme)
        self.horizontalLayoutTop.addWidget(self.buttonImportLogo)
        self.horizontalLayoutTop.addWidget(self.buttonPreviewTheme)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.labelPreview = QtWidgets.QLabel(ThemingTab)
        self.labelPreview.setText("Aperçu du thème ici")
        self.labelPreview.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelPreview)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/tutorial_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/tutorial_dialog.py
Rôle : Fenêtre modale Tutoriel interactif embarqué, navigation pas-à-pas.
Hérite de QDialog et Ui_TutorialDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_TutorialDialog généré par pyuic5 à partir de resources/ui/tutorial_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.tutorial_dialog_ui import Ui_TutorialDialog

class TutorialDialog(QtWidgets.QDialog, Ui_TutorialDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonNext.clicked.connect(self.next_step)
        self.buttonPrev.clicked.connect(self.prev_step)
        self.buttonClose.clicked.connect(self.reject)
        self.steps = [
            "Bienvenue dans Club Manager !\n\nCe tutoriel vous guidera pour la prise en main.",
            "1. Onglet Membres : ajoutez, modifiez, recherchez vos adhérents.",
            "2. Onglet Postes : gérez les rôles (président, trésorier, staff...).",
            "3. Onglet Sessions : créez vos saisons/périodes.",
            "4. Onglet Cotisations : suivez paiements, relances, historiques.",
            "5. Champs personnalisés : ajoutez des informations spécifiques.",
            "6. Exports, Mailing, Sauvegarde, Audit... : tout est accessible en 1 clic !",
            "N'hésitez pas à consulter la documentation pour plus de détails."
        ]
        self.current_step = 0
        self.refresh_step()

    def refresh_step(self):
        self.labelStep.setText(self.steps[self.current_step])
        self.buttonPrev.setEnabled(self.current_step > 0)
        self.buttonNext.setEnabled(self.current_step < len(self.steps)-1)

    def next_step(self):
        if self.current_step < len(self.steps)-1:
            self.current_step += 1
            self.refresh_step()

    def prev_step(self):
        if self.current_step > 0:
            self.current_step -= 1
            self.refresh_step()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/tutorial_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/tutorial_dialog.ui
Classe : Ui_TutorialDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_TutorialDialog(object):
    def setupUi(self, TutorialDialog):
        TutorialDialog.setObjectName("TutorialDialog")
        TutorialDialog.resize(500, 320)
        self.verticalLayout = QtWidgets.QVBoxLayout(TutorialDialog)
        self.labelStep = QtWidgets.QLabel(TutorialDialog)
        self.labelStep.setWordWrap(True)
        self.labelStep.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelStep)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.buttonPrev = QtWidgets.QPushButton(TutorialDialog)
        self.buttonPrev.setText("Précédent")
        self.buttonNext = QtWidgets.QPushButton(TutorialDialog)
        self.buttonNext.setText("Suivant")
        self.buttonClose = QtWidgets.QPushButton(TutorialDialog)
        self.buttonClose.setText("Fermer")
        self.horizontalLayout.addWidget(self.buttonPrev)
        self.horizontalLayout.addWidget(self.buttonNext)
        self.horizontalLayout.addWidget(self.buttonClose)
        self.verticalLayout.addLayout(self.horizontalLayout)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/welcome_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/welcome_dialog.py
Rôle : Fenêtre d'accueil au lancement (choix base, création nouvelle base, accès tutoriel/doc).
Hérite de QDialog et Ui_WelcomeDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_WelcomeDialog généré par pyuic5 à partir de resources/ui/welcome_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.welcome_dialog_ui import Ui_WelcomeDialog

class WelcomeDialog(QtWidgets.QDialog, Ui_WelcomeDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonOpenDB.clicked.connect(self.open_db)
        self.buttonNewDB.clicked.connect(self.create_db)
        self.buttonTutorial.clicked.connect(self.open_tutorial)
        self.buttonDoc.clicked.connect(self.open_doc)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

    def open_db(self):
        fname, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Ouvrir une base existante", "", "Fichiers Club (*.db);;Tous les fichiers (*)")
        if fname:
            self.editDBPath.setText(fname)

    def create_db(self):
        fname, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Créer une nouvelle base", "", "Fichiers Club (*.db);;Tous les fichiers (*)")
        if fname:
            self.editDBPath.setText(fname)

    def open_tutorial(self):
        QtWidgets.QMessageBox.information(self, "Tutoriel", "Lancement du tutoriel interactif... (fonctionnalité à compléter)")

    def open_doc(self):
        QtWidgets.QMessageBox.information(self, "Documentation", "Ouverture de la documentation utilisateur...")
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./club_manager/ui/welcome_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/welcome_dialog.ui
Classe : Ui_WelcomeDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_WelcomeDialog(object):
    def setupUi(self, WelcomeDialog):
        WelcomeDialog.setObjectName("WelcomeDialog")
        WelcomeDialog.resize(500, 320)
        self.verticalLayout = QtWidgets.QVBoxLayout(WelcomeDialog)
        self.labelLogo = QtWidgets.QLabel(WelcomeDialog)
        self.labelLogo.setText("CLUB MANAGER")
        self.labelLogo.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelLogo)
        self.labelDesc = QtWidgets.QLabel(WelcomeDialog)
        self.labelDesc.setText("Bienvenue ! Choisissez une base existante ou créez-en une nouvelle.\nAccédez au tutoriel ou à la documentation à tout moment.")
        self.labelDesc.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelDesc)
        self.formLayout = QtWidgets.QFormLayout()
        self.editDBPath = QtWidgets.QLineEdit(WelcomeDialog)
        self.formLayout.addRow("Base de données :", self.editDBPath)
        self.buttonOpenDB = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonOpenDB.setText("Ouvrir une base existante")
        self.buttonNewDB = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonNewDB.setText("Créer une nouvelle base")
        self.formLayout.addRow(self.buttonOpenDB, self.buttonNewDB)
        self.verticalLayout.addLayout(self.formLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.buttonTutorial = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonTutorial.setText("Tutoriel interactif")
        self.buttonDoc = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonDoc.setText("Documentation")
        self.horizontalLayout.addWidget(self.buttonTutorial)
        self.horizontalLayout.addWidget(self.buttonDoc)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(WelcomeDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_audit.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.audit import log_action
from club_manager.core.database import Database

def test_log_action(tmp_path, monkeypatch):
    dbfile = tmp_path / "audit.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    log_action("MODIF", "admin", "members", "Test modification")
    rows = db.query("SELECT * FROM audit WHERE action='MODIF'")
    assert rows
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_custom_fields.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.custom_fields import add_custom_field, get_all_custom_fields, delete_custom_field
from club_manager.core.database import Database

def test_add_and_delete_custom_field(tmp_path, monkeypatch):
    dbfile = tmp_path / "cf.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    add_custom_field("Age", "Numérique", "", "", "")
    cfs = get_all_custom_fields()
    assert any(cf["name"] == "Age" for cf in cfs)
    field_id = [cf["id"] for cf in cfs if cf["name"] == "Age"][0]
    delete_custom_field(field_id)
    cfs = get_all_custom_fields()
    assert all(cf["name"] != "Age" for cf in cfs)
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_database.py ===

```python
# -*- coding: utf-8 -*-
import os
import tempfile
import pytest
from club_manager.core.database import Database

@pytest.fixture
def db():
    fd, path = tempfile.mkstemp()
    os.close(fd)
    db = Database(path)
    yield db
    db.close()
    os.remove(path)

def test_schema_creation(db):
    # Test presence of a table
    tables = db.query("SELECT name FROM sqlite_master WHERE type='table'")
    table_names = [t["name"] for t in tables]
    assert "members" in table_names
    assert "cotisations" in table_names

def test_insert_and_query_member(db):
    db.execute("INSERT INTO members (last_name, first_name) VALUES (?, ?)", ("Durand", "Paul"))
    rows = db.query("SELECT * FROM members WHERE last_name=?", ("Durand",))
    assert len(rows) == 1
    assert rows[0]["first_name"] == "Paul"
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_export.py ===

```python
# -*- coding: utf-8 -*-
import pandas as pd
from club_manager.core.export import export_members_csv

def test_export_members_csv(tmp_path):
    members = [
        {"last_name": "Dupont", "first_name": "Marie"},
        {"last_name": "Durand", "first_name": "Paul"},
    ]
    outfile = tmp_path / "out.csv"
    pd.DataFrame(members).to_csv(outfile, index=False, encoding="utf-8")
    df = pd.read_csv(outfile)
    assert list(df["last_name"]) == ["Dupont", "Durand"]
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_images.py ===

```python
# -*- coding: utf-8 -*-
import os
import tempfile
from club_manager.core.images import save_image, delete_image, list_images, IMAGE_FOLDER

def test_save_delete_list_image(tmp_path, monkeypatch):
    # Crée une image temporaire
    img = tmp_path / "testimg.png"
    img.write_bytes(b"\x89PNG\r\n\x1a\n")
    # Redirige IMAGE_FOLDER vers un dossier temporaire
    monkeypatch.setattr("club_manager.core.images.IMAGE_FOLDER", str(tmp_path))
    dest = save_image(str(img), "logo_test.png")
    assert os.path.exists(dest)
    assert "logo_test.png" in list_images()
    delete_image("logo_test.png")
    assert "logo_test.png" not in list_images()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_imports.py ===

```python
# -*- coding: utf-8 -*-
import csv
import tempfile
from club_manager.core.imports import import_csv_to_table, guess_csv_fields
from club_manager.core.database import Database

def test_guess_csv_fields(tmp_path):
    csvfile = tmp_path / "test.csv"
    with open(csvfile, "w", encoding="utf-8") as f:
        f.write("nom,prenom,ville\nDupont,Marie,Paris\n")
    fields = guess_csv_fields(str(csvfile))
    assert fields == ["nom", "prenom", "ville"]

def test_import_csv_to_table(tmp_path, monkeypatch):
    dbfile = tmp_path / "imp.db"
    csvfile = tmp_path / "in.csv"
    with open(csvfile, "w", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=["last_name", "first_name"])
        writer.writeheader()
        writer.writerow({"last_name": "Test", "first_name": "User"})
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    # Simule le QFileDialog
    monkeypatch.setattr("PyQt5.QtWidgets.QFileDialog.getOpenFileName", lambda *a, **k: (str(csvfile), ""))
    import_csv_to_table("members", {"last_name": "last_name", "first_name": "first_name"}, parent=None)
    rows = db.query("SELECT * FROM members WHERE last_name='Test'")
    assert rows
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_mailing.py ===

```python
# -*- coding: utf-8 -*-
import pytest
from club_manager.core.mailing import send_mailing

def test_send_mailing(monkeypatch):
    smtp_calls = []
    class DummySMTP:
        def __init__(self, host, port): pass
        def starttls(self): pass
        def login(self, user, password): pass
        def sendmail(self, from_, to, msg): smtp_calls.append((from_, to, msg))
        def __enter__(self): return self
        def __exit__(self, *a): pass
    monkeypatch.setattr("smtplib.SMTP", DummySMTP)
    send_mailing(
        "Sujet test", "Message test",
        ["foo@bar.com"], {"from": "me@bar.com", "host": "localhost"},
        parent=None
    )
    assert smtp_calls
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_mailing_advanced.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.mailing_advanced import personalize_template, select_recipients

def test_personalize_template():
    template = "Bonjour {prenom} {nom} !"
    context = {"prenom": "Marie", "nom": "Dupont"}
    msg = personalize_template(template, context)
    assert msg == "Bonjour Marie Dupont !"

def test_select_recipients():
    members = [
        {"last_name": "A", "status": "Payé"},
        {"last_name": "B", "status": "En attente"},
    ]
    sel = select_recipients(members, {"status": "Payé"})
    assert len(sel) == 1 and sel[0]["last_name"] == "A"
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_members.py ===

```python
# -*- coding: utf-8 -*-
import pytest
from club_manager.core.database import Database
from club_manager.core.members import add_member, get_all_members, delete_member

@pytest.fixture
def db(tmp_path, monkeypatch):
    dbfile = tmp_path / "test.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    yield db
    db.close()

def test_add_and_delete_member(db, monkeypatch):
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    add_member(last_name="Test", first_name="User")
    members = get_all_members()
    assert any(m["last_name"] == "Test" for m in members)
    member_id = [m["id"] for m in members if m["last_name"] == "Test"][0]
    delete_member(member_id)
    members = get_all_members()
    assert all(m["last_name"] != "Test" for m in members)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_relance.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.relance import get_members_to_remind, mark_relance_sent
from club_manager.core.database import Database

def test_get_members_to_remind_and_mark(tmp_path, monkeypatch):
    dbfile = tmp_path / "relance.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    db.execute("INSERT INTO members (last_name, first_name) VALUES (?, ?)", ("R", "L"))
    db.execute("INSERT INTO sessions (name, start, end, club_amount, mjc_amount, is_current) VALUES (?, ?, ?, ?, ?, ?)", ("2024", "2024-01-01", "2024-12-31", 100, 10, 1))
    db.execute("INSERT INTO cotisations (member_id, session_id, amount, paid, status) VALUES (?, ?, ?, ?, ?)", (1, 1, 100, 0, "En attente"))
    members = get_members_to_remind()
    assert any(m["last_name"] == "R" for m in members)
    mark_relance_sent(1)
    cots = db.query("SELECT status FROM cotisations WHERE id=1")
    assert cots[0]["status"] == "Relancé"
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_rgpd.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.rgpd import purge_rgpd, is_rgpd_ready
from club_manager.core.database import Database

def test_purge_rgpd(tmp_path, monkeypatch):
    dbfile = tmp_path / "rgpd.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    db.execute("INSERT INTO members (last_name, first_name, rgpd) VALUES (?, ?, ?)", ("Test", "RGPD", 1))
    purge_rgpd()
    rows = db.query("SELECT * FROM members")
    assert rows[0]["last_name"] in ("ANONYMISE", "Test")
    db.close()

def test_is_rgpd_ready():
    member = {"rgpd": 1}
    assert is_rgpd_ready(member)
    member = {"rgpd": 0}
    assert not is_rgpd_ready(member)
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_sessions.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.sessions import add_session, get_all_sessions, set_current_session
from club_manager.core.database import Database

def test_add_and_set_current_session(tmp_path, monkeypatch):
    dbfile = tmp_path / "sess.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    add_session("2023/2024", "2023-09-01", "2024-06-30", 120, 25, is_current=True)
    add_session("2024/2025", "2024-09-01", "2025-06-30", 130, 30, is_current=False)
    set_current_session(2)
    sess = get_all_sessions()
    current = [s for s in sess if s["is_current"]][0]
    assert current["name"] == "2024/2025"
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_statistics.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.statistics import count_members, count_members_by_city, count_cotisations_by_status, total_collected_fees, session_history
from club_manager.core.database import Database

def test_statistics(tmp_path, monkeypatch):
    dbfile = tmp_path / "stat.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    db.execute("INSERT INTO members (last_name, first_name, city) VALUES (?, ?, ?)", ("A", "B", "C"))
    db.execute("INSERT INTO cotisations (member_id, session_id, amount, paid, status) VALUES (?, ?, ?, ?, ?)", (1, 1, 100, 100, "Payé"))
    db.execute("INSERT INTO sessions (name, start, end, club_amount, mjc_amount, is_current) VALUES (?, ?, ?, ?, ?, ?)", ("S1", "2020-01-01", "2020-12-31", 100, 20, 1))
    assert count_members() == 1
    assert count_members_by_city()[0]["city"] == "C"
    assert count_cotisations_by_status()[0]["status"] == "Payé"
    assert total_collected_fees() == 100
    assert session_history()
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: ./tests/test_utils.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.utils import is_email_valid, is_phone_valid, format_currency, safe_str

def test_is_email_valid():
    assert is_email_valid("foo@bar.com")
    assert not is_email_valid("foo@bar")
    assert not is_email_valid("foo.com")

def test_is_phone_valid():
    assert is_phone_valid("0601020304")
    assert is_phone_valid("06-01-02-03-04")
    assert not is_phone_valid("1234")

def test_format_currency():
    assert format_currency(10) == "10.00 €"
    assert format_currency("abc") == "abc"

def test_safe_str():
    assert safe_str(123) == "123"
    assert isinstance(safe_str(object()), str)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/main.py ===

```python
# -*- coding: utf-8 -*-
"""
Script de démarrage principal pour Club Manager.
Initialise l'application PyQt5, affiche la fenêtre principale.
"""

import sys
from PyQt5.QtWidgets import QApplication
from club_manager.main_window import MainWindow

def main():
    app = QApplication(sys.argv)
    app.setApplicationName("Club Manager")
    app.setOrganizationName("DarkSario")
    app.setStyle("Fusion")
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/main_window.py ===

```python
# -*- coding: utf-8 -*-
"""
Fenêtre principale de Club Manager.
Gère l'orchestration des tabs, menus, dialogs, et la logique globale.
"""

from PyQt5.QtWidgets import QMainWindow, QTabWidget, QAction, QFileDialog, QMessageBox
from PyQt5.QtGui import QIcon
from club_manager.ui.members_tab import MembersTab
from club_manager.ui.positions_tab import PositionsTab
from club_manager.ui.sessions_tab import SessionsTab
from club_manager.ui.cotisations_tab import CotisationsTab
from club_manager.ui.custom_fields_tab import CustomFieldsTab
from club_manager.ui.audit_tab import AuditTab
from club_manager.ui.exports_tab import ExportsTab
from club_manager.ui.mailing_tab import MailingTab
from club_manager.ui.theming_tab import ThemingTab
from club_manager.ui.backup_tab import BackupTab
from club_manager.ui.about_dialog import AboutDialog
from club_manager.ui.welcome_dialog import WelcomeDialog
from club_manager.ui.tutorial_dialog import TutorialDialog
from club_manager.ui.doc_viewer_dialog import DocViewerDialog
from club_manager.core.theming import load_theme_choice, load_theme

class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Club Manager")
        self.setWindowIcon(QIcon(":/images/logo.png"))
        self.resize(1200, 780)
        self.setup_tabs()        # Initialiser les tabs en premier !
        self.setup_menu()
        self.apply_theme_on_startup()
        self.show_welcome_if_first_launch()

    def setup_tabs(self):
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        self.members_tab = MembersTab()
        self.positions_tab = PositionsTab()
        self.sessions_tab = SessionsTab()
        self.cotisations_tab = CotisationsTab()
        self.custom_fields_tab = CustomFieldsTab()
        self.audit_tab = AuditTab()
        self.exports_tab = ExportsTab()
        self.mailing_tab = MailingTab()
        self.theming_tab = ThemingTab()
        self.backup_tab = BackupTab()

        self.tabs.addTab(self.members_tab, "Membres")
        self.tabs.addTab(self.positions_tab, "Postes")
        self.tabs.addTab(self.sessions_tab, "Sessions")
        self.tabs.addTab(self.cotisations_tab, "Cotisations")
        self.tabs.addTab(self.custom_fields_tab, "Champs personnalisés")
        self.tabs.addTab(self.exports_tab, "Exports")
        self.tabs.addTab(self.mailing_tab, "Mailing")
        self.tabs.addTab(self.audit_tab, "Audit")
        self.tabs.addTab(self.theming_tab, "Thème")
        self.tabs.addTab(self.backup_tab, "Sauvegarde")

    def setup_menu(self):
        menu = self.menuBar()
        file_menu = menu.addMenu("&Fichier")
        help_menu = menu.addMenu("&Aide")

        action_backup = QAction("Exporter une sauvegarde...", self)
        action_backup.triggered.connect(self.backup_tab.start_backup)
        file_menu.addAction(action_backup)

        action_restore = QAction("Restaurer une sauvegarde...", self)
        action_restore.triggered.connect(self.backup_tab.start_restore)
        file_menu.addAction(action_restore)

        action_exit = QAction("Quitter", self)
        action_exit.triggered.connect(self.close)
        file_menu.addAction(action_exit)

        action_tutorial = QAction("Tutoriel interactif", self)
        action_tutorial.triggered.connect(self.show_tutorial)
        help_menu.addAction(action_tutorial)

        action_doc = QAction("Documentation", self)
        action_doc.triggered.connect(self.show_doc)
        help_menu.addAction(action_doc)

        action_about = QAction("À propos...", self)
        action_about.triggered.connect(self.show_about)
        help_menu.addAction(action_about)

    def show_about(self):
        dialog = AboutDialog(self)
        dialog.exec_()

    def show_tutorial(self):
        dialog = TutorialDialog(self)
        dialog.exec_()

    def show_doc(self):
        # On peut charger la doc HTML embarquée ici
        html = "<h2>Documentation Club Manager</h2><p>Consultez le README ou le Wiki pour plus d'infos.</p>"
        dialog = DocViewerDialog(self, html_content=html)
        dialog.exec_()

    def apply_theme_on_startup(self):
        qss, _ = load_theme_choice()
        if qss:
            load_theme(qss, self.parent() or self)

    def show_welcome_if_first_launch(self):
        # Logique simplifiée : afficher si pas de config, sinon passer
        import os
        if not os.path.exists("club_manager.conf"):
            dlg = WelcomeDialog(self)
            if dlg.exec_() == dlg.Accepted:
                # On pourrait sauvegarder les choix ici
                open("club_manager.conf", "w").close()
            else:
                self.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/audit.py ===

```python
# -*- coding: utf-8 -*-
"""
Module de journalisation des actions (audit) pour Club Manager.
Permet de tracer toutes les opérations sensibles.
"""

from datetime import datetime
from .database import Database

def log_action(action, user, obj, details):
    db = Database.instance()
    db.execute(
        "INSERT INTO audit (date, action, user, object, details) VALUES (?, ?, ?, ?, ?)",
        (datetime.now().isoformat(), action, user, obj, details)
    )
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/auditview.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la consultation/filtrage du journal d'audit.
Permet de lister, filtrer, exporter les entrées d'audit.
"""

from .database import Database

def get_all_audit_entries():
    db = Database.instance()
    return db.query("SELECT * FROM audit ORDER BY date DESC")

def get_audit_by_user(user):
    db = Database.instance()
    return db.query("SELECT * FROM audit WHERE user=? ORDER BY date DESC", (user,))

def get_audit_by_action(action):
    db = Database.instance()
    return db.query("SELECT * FROM audit WHERE action=? ORDER BY date DESC", (action,))

def delete_audit_entry(audit_id):
    db = Database.instance()
    db.execute("DELETE FROM audit WHERE id=?", (audit_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/backup.py ===

```python
# -*- coding: utf-8 -*-
"""
Module de sauvegarde et restauration de la base (fichier .db) et des ressources.
"""
import shutil
import os
from PyQt5.QtWidgets import QFileDialog, QMessageBox

def backup_database(db_path, parent=None):
    fname, _ = QFileDialog.getSaveFileName(parent, "Exporter la sauvegarde", "", "Fichier ZIP (*.zip)")
    if not fname:
        return
    try:
        shutil.make_archive(fname.replace(".zip", ""), 'zip', os.path.dirname(db_path))
        QMessageBox.information(parent, "Sauvegarde", "Sauvegarde réalisée avec succès.")
    except Exception as e:
        QMessageBox.critical(parent, "Erreur sauvegarde", str(e))

def restore_database(parent=None):
    fname, _ = QFileDialog.getOpenFileName(parent, "Restaurer une sauvegarde", "", "Fichier ZIP (*.zip)")
    if not fname:
        return
    try:
        shutil.unpack_archive(fname, os.path.dirname(fname), 'zip')
        QMessageBox.information(parent, "Restauration", "Restauration effectuée avec succès.\nRedémarrez l'application.")
    except Exception as e:
        QMessageBox.critical(parent, "Erreur restauration", str(e))

# Fonctions stub pour l'export/import ZIP complet (pour compatibilité UI)
def export_zip_archive(parent=None):
    QMessageBox.information(parent, "Export ZIP", "L'export ZIP complet n'est pas encore implémenté.")

def import_zip_archive(parent=None):
    QMessageBox.information(parent, "Import ZIP", "L'import ZIP complet n'est pas encore implémenté.")
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/cotisations.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des cotisations (paiements) dans Club Manager.
Permet d'ajouter, modifier, supprimer, lister les cotisations, relancer les membres.
"""

from .database import Database

def get_all_cotisations():
    db = Database.instance()
    return db.query("SELECT * FROM cotisations")

def add_cotisation(member_id, session_id, amount, paid, payment_date, method, status):
    db = Database.instance()
    db.execute(
        "INSERT INTO cotisations (member_id, session_id, amount, paid, payment_date, method, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (member_id, session_id, amount, paid, payment_date, method, status)
    )

def update_cotisation(cotisation_id, member_id, session_id, amount, paid, payment_date, method, status):
    db = Database.instance()
    db.execute(
        "UPDATE cotisations SET member_id=?, session_id=?, amount=?, paid=?, payment_date=?, method=?, status=? WHERE id=?",
        (member_id, session_id, amount, paid, payment_date, method, status, cotisation_id)
    )

def delete_cotisation(cotisation_id):
    db = Database.instance()
    db.execute("DELETE FROM cotisations WHERE id=?", (cotisation_id,))

def get_late_members():
    db = Database.instance()
    # Retourne les membres dont la cotisation n'est pas "Payé"
    return db.query("""
        SELECT m.*
        FROM members m
        JOIN cotisations c ON c.member_id = m.id
        WHERE c.status != 'Payé'
    """)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/custom_fields.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des champs personnalisés dans Club Manager.
Permet d'ajouter, modifier, supprimer et interroger les champs personnalisés définis par l'utilisateur.
"""

from .database import Database

def get_all_custom_fields():
    db = Database.instance()
    return db.query("SELECT * FROM custom_fields")

def add_custom_field(name, ftype, default_value, options, constraints):
    db = Database.instance()
    db.execute(
        "INSERT INTO custom_fields (name, type, default_value, options, constraints) VALUES (?, ?, ?, ?, ?)",
        (name, ftype, default_value, options, constraints)
    )

def update_custom_field(field_id, name, ftype, default_value, options, constraints):
    db = Database.instance()
    db.execute(
        "UPDATE custom_fields SET name=?, type=?, default_value=?, options=?, constraints=? WHERE id=?",
        (name, ftype, default_value, options, constraints, field_id)
    )

def delete_custom_field(field_id):
    db = Database.instance()
    db.execute("DELETE FROM custom_fields WHERE id=?", (field_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/database.py ===

```python
# -*- coding: utf-8 -*-
"""
Module central d'accès et gestion à la base SQLite du Club Manager.
Responsable de l'initialisation, connexion, requêtes, migrations et transactions.
"""
import sqlite3
import threading

class Database:
    _instance = None
    _lock = threading.Lock()

    @staticmethod
    def instance(db_path="club_manager.db"):
        with Database._lock:
            if Database._instance is None:
                Database._instance = Database(db_path)
            return Database._instance

    def __init__(self, db_path):
        self.db_path = db_path
        self.connection = sqlite3.connect(self.db_path, check_same_thread=False)
        self.connection.row_factory = sqlite3.Row
        self.setup_schema()

    def setup_schema(self):
        cursor = self.connection.cursor()
        # Extrait simplifié, à compléter/migrer selon les évolutions métiers
        cursor.executescript("""
            CREATE TABLE IF NOT EXISTS members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                last_name TEXT, first_name TEXT, address TEXT, postal_code TEXT, city TEXT,
                phone TEXT, mail TEXT, rgpd INTEGER, image_rights INTEGER,
                health TEXT, ancv INTEGER, cash REAL, cheque1 TEXT, cheque2 TEXT, cheque3 TEXT,
                total_paid REAL, club_part REAL, mjc_part REAL,
                external_club TEXT, mjc_elsewhere TEXT
            );
            CREATE TABLE IF NOT EXISTS positions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, type TEXT, description TEXT, assigned_to INTEGER REFERENCES members(id)
            );
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, start DATE, end DATE, club_amount REAL, mjc_amount REAL, is_current INTEGER
            );
            CREATE TABLE IF NOT EXISTS cotisations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                member_id INTEGER, session_id INTEGER, amount REAL, paid REAL, payment_date DATE,
                method TEXT, status TEXT,
                FOREIGN KEY(member_id) REFERENCES members(id),
                FOREIGN KEY(session_id) REFERENCES sessions(id)
            );
            CREATE TABLE IF NOT EXISTS custom_fields (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, type TEXT, default_value TEXT, options TEXT, constraints TEXT
            );
            CREATE TABLE IF NOT EXISTS audit (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT, action TEXT, user TEXT, object TEXT, details TEXT
            );
        """)
        self.connection.commit()

    def execute(self, sql, params=None):
        cursor = self.connection.cursor()
        cursor.execute(sql, params or [])
        self.connection.commit()
        return cursor

    def query(self, sql, params=None):
        cursor = self.connection.cursor()
        cursor.execute(sql, params or [])
        return cursor.fetchall()

    def close(self):
        self.connection.close()
        Database._instance = None
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/export.py ===

```python
# -*- coding: utf-8 -*-
"""
Module d'export (CSV, PDF) des données Club Manager.
Utilise pandas pour CSV, ReportLab pour PDF.
"""

import csv
from PyQt5.QtWidgets import QFileDialog
import pandas as pd

def export_members_csv(members, parent=None):
    fname, _ = QFileDialog.getSaveFileName(parent, "Exporter en CSV", "", "Fichiers CSV (*.csv)")
    if not fname:
        return
    df = pd.DataFrame(members)
    df.to_csv(fname, index=False, encoding="utf-8")

def export_members_pdf(members, parent=None):
    try:
        from reportlab.pdfgen import canvas
    except ImportError:
        from PyQt5.QtWidgets import QMessageBox
        QMessageBox.warning(parent, "Erreur", "Le module reportlab n'est pas installé.")
        return
    fname, _ = QFileDialog.getSaveFileName(parent, "Exporter en PDF", "", "Fichiers PDF (*.pdf)")
    if not fname:
        return
    c = canvas.Canvas(fname)
    c.setFont("Helvetica", 10)
    y = 800
    for member in members:
        line = " | ".join(str(member[k]) for k in member.keys())
        c.drawString(40, y, line)
        y -= 15
        if y < 50:
            c.showPage()
            y = 800
    c.save()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/exports.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion avancée des exports (sélection dynamique, preview, etc).
Complète `core/export.py` avec gestion dynamique des champs et prévisualisation.
"""

import pandas as pd

def preview_export(data, fields):
    """Retourne un DataFrame pandas avec seulement les champs demandés (pour preview dans QTableWidget)"""
    df = pd.DataFrame(data)
    return df[fields] if fields else df

def export_selected_csv(data, fields, fname):
    """Export CSV sur un sous-ensemble de champs."""
    df = pd.DataFrame(data)
    df[fields].to_csv(fname, index=False, encoding="utf-8")
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/images.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des images (logos, photos) dans Club Manager.
Permet de stocker, charger, supprimer et référencer les images utilisées dans l'application.
"""

import os
import shutil

IMAGE_FOLDER = os.path.join(os.path.dirname(__file__), "..", "resources", "images")

def save_image(src_path, dest_name):
    if not os.path.exists(IMAGE_FOLDER):
        os.makedirs(IMAGE_FOLDER)
    dest_path = os.path.join(IMAGE_FOLDER, dest_name)
    shutil.copy(src_path, dest_path)
    return dest_path

def delete_image(image_name):
    path = os.path.join(IMAGE_FOLDER, image_name)
    if os.path.exists(path):
        os.remove(path)

def list_images():
    if not os.path.exists(IMAGE_FOLDER):
        return []
    return [f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/imports.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour l'import de données CSV (membres, cotisations, etc.) dans Club Manager.
Gère le mapping dynamique entre colonnes du CSV et champs internes.
"""

import csv
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from .database import Database

def import_csv_to_table(table, field_map, parent=None):
    """Importe un CSV dans une table donnée via un mapping {col_csv: champ_table}."""
    fname, _ = QFileDialog.getOpenFileName(parent, "Importer un fichier CSV", "", "Fichiers CSV (*.csv)")
    if not fname:
        return
    db = Database.instance()
    with open(fname, "r", encoding="utf-8-sig") as f:
        reader = csv.DictReader(f)
        count = 0
        for row in reader:
            values = [row.get(col, "") for col in field_map.keys()]
            placeholders = ','.join(['?'] * len(field_map))
            columns = ','.join(field_map.values())
            db.execute(f"INSERT INTO {table} ({columns}) VALUES ({placeholders})", values)
            count += 1
    QMessageBox.information(parent, "Import terminé", f"{count} lignes importées dans {table}.")

def guess_csv_fields(fname):
    """Retourne les noms de colonnes du CSV pour mapping dynamique."""
    with open(fname, "r", encoding="utf-8-sig") as f:
        reader = csv.reader(f)
        return next(reader)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/mailing.py ===

```python
# -*- coding: utf-8 -*-
"""
Module d'envoi de mailing groupé (SMTP) pour Club Manager.
Gère la sélection des destinataires, la composition du message, et l'envoi via SMTP.
"""
import smtplib
from email.mime.text import MIMEText
from PyQt5.QtWidgets import QMessageBox

def send_mailing(subject, message, recipient_list, smtp_config, parent=None):
    try:
        msg = MIMEText(message, "plain", "utf-8")
        msg["Subject"] = subject
        msg["From"] = smtp_config["from"]
        msg["To"] = ", ".join(recipient_list)
        with smtplib.SMTP(smtp_config["host"], smtp_config.get("port", 25)) as server:
            if smtp_config.get("tls"):
                server.starttls()
            if smtp_config.get("user"):
                server.login(smtp_config["user"], smtp_config["password"])
            server.sendmail(smtp_config["from"], recipient_list, msg.as_string())
        QMessageBox.information(parent, "Mailing", "Mail envoyé à tous les destinataires.")
    except Exception as e:
        QMessageBox.critical(parent, "Erreur SMTP", f"Erreur lors de l'envoi : {e}")
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/mailing_advanced.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier avancé pour le mailing de Club Manager.
Gère la sélection dynamique, la personnalisation de masse, les modèles (templates) et les pièces jointes.
"""

import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from PyQt5.QtWidgets import QMessageBox, QFileDialog

def select_recipients(members, filters=None):
    """Filtre dynamiquement les membres selon des critères (ex: statut cotisation, session, etc.)."""
    if not filters:
        return members
    return [m for m in members if all(m.get(k) == v for k, v in filters.items())]

def load_template(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def personalize_template(template, context):
    """Remplace les variables du template par les valeurs du contexte (ex: {prenom}, {nom})"""
    for k, v in context.items():
        template = template.replace("{" + k + "}", str(v))
    return template

def select_attachments(parent=None):
    """Ouvre un sélecteur de fichiers pour pièces jointes, retourne la liste des chemins."""
    files, _ = QFileDialog.getOpenFileNames(parent, "Sélectionnez les pièces jointes")
    return files

def send_mass_mail(subject, template, members, smtp_config, parent=None, attachments=None):
    """Envoie un mailing personnalisé à chaque membre (remplacement tags, pièces jointes, etc.)."""
    errors = []
    for m in members:
        msg = MIMEMultipart()
        context = {k: m.get(k, "") for k in m.keys()}
        msg.attach(MIMEText(personalize_template(template, context), "plain", "utf-8"))
        msg["Subject"] = subject
        msg["From"] = smtp_config["from"]
        msg["To"] = m.get("mail", "")

        # Ajout pièces jointes
        if attachments:
            for fname in attachments:
                if os.path.isfile(fname):
                    with open(fname, "rb") as f:
                        part = MIMEApplication(f.read(), Name=os.path.basename(fname))
                        part['Content-Disposition'] = f'attachment; filename="{os.path.basename(fname)}"'
                        msg.attach(part)

        try:
            with smtplib.SMTP(smtp_config["host"], smtp_config.get("port", 25)) as server:
                if smtp_config.get("tls"):
                    server.starttls()
                if smtp_config.get("user"):
                    server.login(smtp_config["user"], smtp_config["password"])
                server.sendmail(smtp_config["from"], [m.get("mail", "")], msg.as_string())
        except Exception as e:
            errors.append(f"{m.get('mail', '')}: {e}")

    if errors:
        QMessageBox.warning(parent, "Envoi partiel", "Certaines adresses ont échoué:\n" + "\n".join(errors))
    else:
        QMessageBox.information(parent, "Mailing", "Tous les mails ont été envoyés.")
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/members.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des membres (adhérents) dans Club Manager.
Permet d'ajouter, modifier, supprimer, rechercher les membres.
"""

from .database import Database

def get_all_members():
    db = Database.instance()
    return db.query("SELECT * FROM members")

def get_member_by_id(member_id):
    db = Database.instance()
    rows = db.query("SELECT * FROM members WHERE id=?", (member_id,))
    return rows[0] if rows else None

def add_member(**fields):
    db = Database.instance()
    keys = ','.join(fields.keys())
    qmarks = ','.join(['?']*len(fields))
    values = list(fields.values())
    sql = f"INSERT INTO members ({keys}) VALUES ({qmarks})"
    db.execute(sql, values)

def update_member(member_id, **fields):
    db = Database.instance()
    set_clause = ','.join([f"{k}=?" for k in fields.keys()])
    values = list(fields.values()) + [member_id]
    sql = f"UPDATE members SET {set_clause} WHERE id=?"
    db.execute(sql, values)

def delete_member(member_id):
    db = Database.instance()
    db.execute("DELETE FROM members WHERE id=?", (member_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/positions.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des postes (positions) dans Club Manager.
Permet d'ajouter, modifier, supprimer, lister les postes.
"""

from .database import Database

def get_all_positions():
    db = Database.instance()
    return db.query("SELECT * FROM positions")

def add_position(name, type, description, assigned_to=None):
    db = Database.instance()
    db.execute(
        "INSERT INTO positions (name, type, description, assigned_to) VALUES (?, ?, ?, ?)",
        (name, type, description, assigned_to)
    )

def update_position(position_id, name, type, description, assigned_to):
    db = Database.instance()
    db.execute(
        "UPDATE positions SET name=?, type=?, description=?, assigned_to=? WHERE id=?",
        (name, type, description, assigned_to, position_id)
    )

def delete_position(position_id):
    db = Database.instance()
    db.execute("DELETE FROM positions WHERE id=?", (position_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/relance.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des relances (cotisations en retard) dans Club Manager.
Gère la détection, la génération de relances et le suivi.
"""

from .database import Database

def get_members_to_remind():
    db = Database.instance()
    # Sélectionne les membres ayant au moins une cotisation non payée, par session
    return db.query("""
        SELECT m.*, s.name AS session_name, c.amount, c.paid, c.status
        FROM members m
        JOIN cotisations c ON c.member_id = m.id
        JOIN sessions s ON s.id = c.session_id
        WHERE c.status != 'Payé'
    """)

def mark_relance_sent(cotisation_id):
    db = Database.instance()
    db.execute("UPDATE cotisations SET status='Relancé' WHERE id=?", (cotisation_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/rgpd.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier RGPD pour Club Manager.
Gère la purge RGPD (anonymisation, suppression des données sensibles des anciens membres).
"""
from .database import Database

def purge_rgpd():
    db = Database.instance()
    # Exemple : anonymisation de tous les membres dont l’adhésion est expirée (>2 ans, ici simplifié)
    db.execute("""
        UPDATE members
        SET last_name='ANONYMISE', first_name='ANONYMISE', address='', postal_code='', city='',
            phone='', mail='', health='', external_club='', mjc_elsewhere=''
        WHERE id IN (
            SELECT m.id
            FROM members m
            LEFT JOIN cotisations c ON c.member_id = m.id
            WHERE c.payment_date IS NULL OR c.payment_date < date('now', '-2 years')
        )
    """)
    # Suppression en cascade des cotisations de ces membres si souhaité :
    # db.execute("DELETE FROM cotisations WHERE member_id IN (SELECT id FROM members WHERE last_name='ANONYMISE')")

def is_rgpd_ready(member):
    """Vérifie si le membre coche toutes les cases RGPD (consentement, etc.)"""
    return bool(member.get("rgpd"))
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/sessions.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion des sessions (saisons/périodes) dans Club Manager.
Permet d'ajouter, modifier, supprimer, lister les sessions, définir la session courante.
"""

from .database import Database

def get_all_sessions():
    db = Database.instance()
    return db.query("SELECT * FROM sessions")

def add_session(name, start, end, club_amount, mjc_amount, is_current=False):
    db = Database.instance()
    if is_current:
        db.execute("UPDATE sessions SET is_current=0")
    db.execute(
        "INSERT INTO sessions (name, start, end, club_amount, mjc_amount, is_current) VALUES (?, ?, ?, ?, ?, ?)",
        (name, start, end, club_amount, mjc_amount, int(is_current))
    )

def update_session(session_id, name, start, end, club_amount, mjc_amount, is_current):
    db = Database.instance()
    if is_current:
        db.execute("UPDATE sessions SET is_current=0")
    db.execute(
        "UPDATE sessions SET name=?, start=?, end=?, club_amount=?, mjc_amount=?, is_current=? WHERE id=?",
        (name, start, end, club_amount, mjc_amount, int(is_current), session_id)
    )

def delete_session(session_id):
    db = Database.instance()
    db.execute("DELETE FROM sessions WHERE id=?", (session_id,))

def set_current_session(session_id):
    db = Database.instance()
    db.execute("UPDATE sessions SET is_current=0")
    db.execute("UPDATE sessions SET is_current=1 WHERE id=?", (session_id,))
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/statistics.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour les statistiques et tableaux de bord de Club Manager.
Permet de calculer ratios, répartitions, historiques pour affichage graphique ou synthèse.
"""

from .database import Database

def count_members():
    db = Database.instance()
    rows = db.query("SELECT COUNT(*) AS count FROM members")
    return rows[0]["count"] if rows else 0

def count_members_by_city():
    db = Database.instance()
    return db.query("SELECT city, COUNT(*) AS count FROM members GROUP BY city ORDER BY count DESC")

def count_cotisations_by_status():
    db = Database.instance()
    return db.query("SELECT status, COUNT(*) AS count FROM cotisations GROUP BY status")

def total_collected_fees():
    db = Database.instance()
    rows = db.query("SELECT SUM(paid) AS total FROM cotisations")
    return rows[0]["total"] if rows else 0

def session_history():
    db = Database.instance()
    return db.query("""
        SELECT s.name, COUNT(c.id) AS nb_adhesions, SUM(c.paid) AS montant_total
        FROM sessions s
        LEFT JOIN cotisations c ON c.session_id = s.id
        GROUP BY s.name
        ORDER BY s.start DESC
    """)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/theming.py ===

```python
# -*- coding: utf-8 -*-
"""
Module métier pour la gestion de la thématisation (couleurs, logo, QSS) de Club Manager.
Gère le chargement, l'application et la sauvegarde des thèmes graphiques.
"""

import os
from PyQt5.QtWidgets import QFileDialog, QMessageBox

def load_theme(qss_path, app):
    """Charge et applique un fichier QSS à l'application."""
    if not os.path.exists(qss_path):
        return
    with open(qss_path, "r", encoding="utf-8") as f:
        app.setStyleSheet(f.read())

def import_logo(parent=None):
    """Importe un logo depuis le disque et retourne le chemin (à stocker)"""
    fname, _ = QFileDialog.getOpenFileName(parent, "Choisir un logo", "", "Images (*.png *.jpg *.jpeg *.bmp)")
    return fname

def save_theme_choice(qss_path, logo_path, config_path="theme.conf"):
    """Sauvegarde le thème choisi (QSS et logo) dans un fichier de conf simple."""
    with open(config_path, "w", encoding="utf-8") as f:
        f.write(f"qss={qss_path}\nlogo={logo_path}\n")

def load_theme_choice(config_path="theme.conf"):
    """Charge le thème choisi (QSS et logo) depuis le fichier de conf."""
    if not os.path.exists(config_path):
        return None, None
    qss = logo = None
    with open(config_path, "r", encoding="utf-8") as f:
        for line in f:
            if line.startswith("qss="):
                qss = line[4:].strip()
            elif line.startswith("logo="):
                logo = line[5:].strip()
    return qss, logo
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/core/utils.py ===

```python
# -*- coding: utf-8 -*-
"""
Utilitaires transverses Club Manager (validation, génération, etc.)
"""

import re

def is_email_valid(email):
    return bool(re.match(r"[^@]+@[^@]+\.[^@]+", email))

def is_phone_valid(phone):
    return bool(re.match(r"^0[1-9]([-. ]?\d{2}){4}$", phone))

def format_currency(amount):
    try:
        return "{:.2f} €".format(float(amount))
    except Exception:
        return str(amount)

def safe_str(obj):
    try:
        return str(obj)
    except Exception:
        return ""
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/about_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/about_dialog.py
Rôle : Fenêtre modale "À propos" (version, crédits, informations légales).
Hérite de QDialog et Ui_AboutDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_AboutDialog généré par pyuic5 à partir de resources/ui/about_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.about_dialog_ui import Ui_AboutDialog

class AboutDialog(QtWidgets.QDialog, Ui_AboutDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/about_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/about_dialog.ui
Classe : Ui_AboutDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_AboutDialog(object):
    def setupUi(self, AboutDialog):
        AboutDialog.setObjectName("AboutDialog")
        AboutDialog.resize(400, 320)
        self.verticalLayout = QtWidgets.QVBoxLayout(AboutDialog)
        self.labelLogo = QtWidgets.QLabel(AboutDialog)
        self.labelLogo.setText("CLUB MANAGER")
        self.labelLogo.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelLogo)
        self.labelVersion = QtWidgets.QLabel(AboutDialog)
        self.labelVersion.setText("Version 1.0.0")
        self.labelVersion.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelVersion)
        self.labelCopyright = QtWidgets.QLabel(AboutDialog)
        self.labelCopyright.setText("© 2025 DarkSario\nLicence libre, voir documentation.")
        self.labelCopyright.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelCopyright)
        self.textCredits = QtWidgets.QTextBrowser(AboutDialog)
        self.textCredits.setHtml(
            "<b>Auteurs</b>: DarkSario & contributeurs<br>"
            "<b>Remerciements</b>: Projet open-source inspiré par la communauté.<br>"
            "<b>Librairies</b>: PyQt5, SQLite, etc.<br><br>"
            "<i>Pour toute remarque ou bug, voir la documentation ou le dépôt GitHub.</i>"
        )
        self.textCredits.setOpenExternalLinks(True)
        self.verticalLayout.addWidget(self.textCredits)
        self.buttonBox = QtWidgets.QDialogButtonBox(AboutDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/audit_details_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/audit_details_dialog.py
Rôle : Fenêtre modale de détails d'une entrée d'audit.
Hérite de QDialog et Ui_AuditDetailsDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_AuditDetailsDialog généré par pyuic5 à partir de resources/ui/audit_details_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.audit_details_dialog_ui import Ui_AuditDetailsDialog

class AuditDetailsDialog(QtWidgets.QDialog, Ui_AuditDetailsDialog):
    def __init__(self, parent=None, details=None):
        super().__init__(parent)
        self.setupUi(self)
        if details:
            self.labelDate.setText(details.get("date", ""))
            self.labelAction.setText(details.get("action", ""))
            self.labelUser.setText(details.get("user", ""))
            self.labelObject.setText(details.get("object", ""))
            self.textDetails.setPlainText(details.get("details", ""))
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/audit_details_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/audit_details_dialog.ui
Classe : Ui_AuditDetailsDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_AuditDetailsDialog(object):
    def setupUi(self, AuditDetailsDialog):
        AuditDetailsDialog.setObjectName("AuditDetailsDialog")
        AuditDetailsDialog.resize(500, 300)
        self.verticalLayout = QtWidgets.QVBoxLayout(AuditDetailsDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.labelDate = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Date :", self.labelDate)
        self.labelAction = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Action :", self.labelAction)
        self.labelUser = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Utilisateur :", self.labelUser)
        self.labelObject = QtWidgets.QLabel(AuditDetailsDialog)
        self.formLayout.addRow("Objet :", self.labelObject)
        self.verticalLayout.addLayout(self.formLayout)
        self.textDetails = QtWidgets.QTextEdit(AuditDetailsDialog)
        self.textDetails.setReadOnly(True)
        self.textDetails.setPlaceholderText("Détails de l'action...")
        self.verticalLayout.addWidget(self.textDetails)
        self.buttonBox = QtWidgets.QDialogButtonBox(AuditDetailsDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/audit_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/audit_tab.py
Rôle : Onglet audit (AuditTab) du Club Manager.
Hérite de QWidget et de Ui_AuditTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_AuditTab généré par pyuic5 à partir de resources/ui/audit_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.audit_tab_ui import Ui_AuditTab

class AuditTab(QtWidgets.QWidget, Ui_AuditTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonExportAudit.clicked.connect(self.export_audit)
        self.buttonPurgeRGPD.clicked.connect(self.purge_rgpd)
        self.tableAudit.doubleClicked.connect(self.view_audit_entry)

    def export_audit(self):
        # Exporter le journal d'audit (CSV/PDF)
        pass

    def purge_rgpd(self):
        # Lancer la purge RGPD (suppression/anonymisation)
        pass

    def view_audit_entry(self):
        # Afficher le détail d'une entrée d'audit
        pass

    def refresh_audit(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/audit_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/audit_tab.ui
Classe : Ui_AuditTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_AuditTab(object):
    def setupUi(self, AuditTab):
        AuditTab.setObjectName("AuditTab")
        AuditTab.resize(900, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(AuditTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonExportAudit = QtWidgets.QPushButton(AuditTab)
        self.buttonExportAudit.setText("Exporter le journal")
        self.buttonPurgeRGPD = QtWidgets.QPushButton(AuditTab)
        self.buttonPurgeRGPD.setText("Purge RGPD")
        self.horizontalLayoutTop.addWidget(self.buttonExportAudit)
        self.horizontalLayoutTop.addWidget(self.buttonPurgeRGPD)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableAudit = QtWidgets.QTableWidget(AuditTab)
        self.tableAudit.setColumnCount(5)
        self.tableAudit.setHorizontalHeaderLabels([
            "Date", "Action", "Utilisateur", "Objet", "Détail"
        ])
        self.verticalLayout.addWidget(self.tableAudit)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/backup_restore_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/backup_restore_dialog.py
Rôle : Fenêtre modale de restauration de sauvegarde.
Hérite de QDialog et Ui_BackupRestoreDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_BackupRestoreDialog généré par pyuic5 à partir de resources/ui/backup_restore_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.backup_restore_dialog_ui import Ui_BackupRestoreDialog

class BackupRestoreDialog(QtWidgets.QDialog, Ui_BackupRestoreDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        self.buttonBrowse.clicked.connect(self.browse_file)

    def browse_file(self):
        fname, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Sélectionner une sauvegarde", "", "Fichiers ZIP (*.zip);;Tous les fichiers (*)")
        if fname:
            self.editBackupPath.setText(fname)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/backup_restore_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/backup_restore_dialog.ui
Classe : Ui_BackupRestoreDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_BackupRestoreDialog(object):
    def setupUi(self, BackupRestoreDialog):
        BackupRestoreDialog.setObjectName("BackupRestoreDialog")
        BackupRestoreDialog.resize(420, 140)
        self.verticalLayout = QtWidgets.QVBoxLayout(BackupRestoreDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editBackupPath = QtWidgets.QLineEdit(BackupRestoreDialog)
        self.formLayout.addRow("Chemin du fichier de sauvegarde :", self.editBackupPath)
        self.buttonBrowse = QtWidgets.QPushButton(BackupRestoreDialog)
        self.buttonBrowse.setText("Parcourir...")
        self.formLayout.addRow(self.buttonBrowse)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(BackupRestoreDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/backup_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/backup_tab.py
Rôle : Onglet sauvegarde/restauration (BackupTab) du Club Manager.
Hérite de QWidget et de Ui_BackupTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_BackupTab généré par pyuic5 à partir de resources/ui/backup_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.backup_tab_ui import Ui_BackupTab
from club_manager.core.backup import backup_database, restore_database, export_zip_archive, import_zip_archive

class BackupTab(QtWidgets.QWidget, Ui_BackupTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBackup.clicked.connect(self.start_backup)
        self.buttonRestore.clicked.connect(self.start_restore)
        self.buttonExportZip.clicked.connect(self.start_export_zip)
        self.buttonImportZip.clicked.connect(self.start_import_zip)

    def start_backup(self):
        # Sauvegarde manuelle de la base
        backup_database("club_manager.db", parent=self)

    def start_restore(self):
        # Restauration d'une sauvegarde
        restore_database(parent=self)

    def start_export_zip(self):
        # Export complet (archive zip)
        export_zip_archive(parent=self)

    def start_import_zip(self):
        # Import complet (archive zip)
        import_zip_archive(parent=self)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/backup_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/backup_tab.ui
Classe : Ui_BackupTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_BackupTab(object):
    def setupUi(self, BackupTab):
        BackupTab.setObjectName("BackupTab")
        BackupTab.resize(600, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(BackupTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonBackup = QtWidgets.QPushButton(BackupTab)
        self.buttonBackup.setText("Sauvegarder")
        self.buttonRestore = QtWidgets.QPushButton(BackupTab)
        self.buttonRestore.setText("Restaurer")
        self.buttonExportZip = QtWidgets.QPushButton(BackupTab)
        self.buttonExportZip.setText("Exporter (zip)")
        self.buttonImportZip = QtWidgets.QPushButton(BackupTab)
        self.buttonImportZip.setText("Importer (zip)")
        self.horizontalLayoutTop.addWidget(self.buttonBackup)
        self.horizontalLayoutTop.addWidget(self.buttonRestore)
        self.horizontalLayoutTop.addWidget(self.buttonExportZip)
        self.horizontalLayoutTop.addWidget(self.buttonImportZip)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.labelLastBackup = QtWidgets.QLabel(BackupTab)
        self.labelLastBackup.setText("Dernière sauvegarde : inconnue")
        self.verticalLayout.addWidget(self.labelLastBackup)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/confirmation_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/confirmation_dialog.py
Rôle : Fenêtre modale de confirmation (suppression, actions critiques).
Hérite de QDialog et Ui_ConfirmationDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ConfirmationDialog généré par pyuic5 à partir de resources/ui/confirmation_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.confirmation_dialog_ui import Ui_ConfirmationDialog

class ConfirmationDialog(QtWidgets.QDialog, Ui_ConfirmationDialog):
    def __init__(self, parent=None, message="Confirmer l'action ?"):
        super().__init__(parent)
        self.setupUi(self)
        self.labelMessage.setText(message)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/confirmation_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/confirmation_dialog.ui
Classe : Ui_ConfirmationDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ConfirmationDialog(object):
    def setupUi(self, ConfirmationDialog):
        ConfirmationDialog.setObjectName("ConfirmationDialog")
        ConfirmationDialog.resize(340, 120)
        self.verticalLayout = QtWidgets.QVBoxLayout(ConfirmationDialog)
        self.labelMessage = QtWidgets.QLabel(ConfirmationDialog)
        self.labelMessage.setText("Confirmer l'action ?")
        self.labelMessage.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelMessage)
        self.buttonBox = QtWidgets.QDialogButtonBox(ConfirmationDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/cotisations_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/cotisations_tab.py
Rôle : Onglet gestion des cotisations (CotisationsTab) du Club Manager.
Hérite de QWidget et de Ui_CotisationsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CotisationsTab généré par pyuic5 à partir de resources/ui/cotisations_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.cotisations_tab_ui import Ui_CotisationsTab

class CotisationsTab(QtWidgets.QWidget, Ui_CotisationsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddCotisation.clicked.connect(self.add_cotisation)
        self.buttonEditCotisation.clicked.connect(self.edit_cotisation)
        self.buttonDeleteCotisation.clicked.connect(self.delete_cotisation)
        self.buttonExportCotisations.clicked.connect(self.export_cotisations)
        self.tableCotisations.doubleClicked.connect(self.edit_cotisation)
        self.buttonRelance.clicked.connect(self.relance_cotisation)

    def add_cotisation(self):
        from club_manager.ui.cotisation_form_dialog import CotisationFormDialog
        dlg = CotisationFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_cotisations()

    def edit_cotisation(self):
        # Logique de modification de la cotisation sélectionnée
        pass

    def delete_cotisation(self):
        # Logique de suppression de la/des cotisations sélectionnées
        pass

    def export_cotisations(self):
        # Exporter les cotisations
        pass

    def relance_cotisation(self):
        # Relancer les membres en retard de paiement
        pass

    def refresh_cotisations(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/cotisations_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/cotisations_tab.ui
Classe : Ui_CotisationsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CotisationsTab(object):
    def setupUi(self, CotisationsTab):
        CotisationsTab.setObjectName("CotisationsTab")
        CotisationsTab.resize(800, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(CotisationsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddCotisation = QtWidgets.QPushButton(CotisationsTab)
        self.buttonAddCotisation.setText("Ajouter")
        self.buttonEditCotisation = QtWidgets.QPushButton(CotisationsTab)
        self.buttonEditCotisation.setText("Modifier")
        self.buttonDeleteCotisation = QtWidgets.QPushButton(CotisationsTab)
        self.buttonDeleteCotisation.setText("Supprimer")
        self.buttonExportCotisations = QtWidgets.QPushButton(CotisationsTab)
        self.buttonExportCotisations.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddCotisation)
        self.horizontalLayoutTop.addWidget(self.buttonEditCotisation)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteCotisation)
        self.horizontalLayoutTop.addWidget(self.buttonExportCotisations)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableCotisations = QtWidgets.QTableWidget(CotisationsTab)
        self.tableCotisations.setColumnCount(7)
        self.tableCotisations.setHorizontalHeaderLabels([
            "Membre", "Session", "Montant", "Payé", "Date", "Méthode", "Statut"
        ])
        self.verticalLayout.addWidget(self.tableCotisations)
        self.buttonRelance = QtWidgets.QPushButton(CotisationsTab)
        self.buttonRelance.setText("Relancer les adhérents en retard")
        self.verticalLayout.addWidget(self.buttonRelance)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/cotisation_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/cotisation_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition de cotisation.
Hérite de QDialog et Ui_CotisationFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CotisationFormDialog généré par pyuic5 à partir de resources/ui/cotisation_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.cotisation_form_dialog_ui import Ui_CotisationFormDialog

class CotisationFormDialog(QtWidgets.QDialog, Ui_CotisationFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

    def accept(self):
        # Validation minimal
        if not self.editMember.text() or not self.editSession.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Membre et session obligatoires.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/cotisation_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/cotisation_form_dialog.ui
Classe : Ui_CotisationFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CotisationFormDialog(object):
    def setupUi(self, CotisationFormDialog):
        CotisationFormDialog.setObjectName("CotisationFormDialog")
        CotisationFormDialog.resize(400, 260)
        self.verticalLayout = QtWidgets.QVBoxLayout(CotisationFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editMember = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Membre :", self.editMember)
        self.editSession = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Session :", self.editSession)
        self.editAmount = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Montant :", self.editAmount)
        self.editPaid = QtWidgets.QLineEdit(CotisationFormDialog)
        self.formLayout.addRow("Payé :", self.editPaid)
        self.datePaiement = QtWidgets.QDateEdit(CotisationFormDialog)
        self.datePaiement.setCalendarPopup(True)
        self.formLayout.addRow("Date paiement :", self.datePaiement)
        self.comboMethod = QtWidgets.QComboBox(CotisationFormDialog)
        self.comboMethod.addItems(["Chèque", "Espèce", "ANCV", "Virement", "Autre"])
        self.formLayout.addRow("Méthode :", self.comboMethod)
        self.comboStatus = QtWidgets.QComboBox(CotisationFormDialog)
        self.comboStatus.addItems(["Payé", "En attente", "Partiel", "Relancé"])
        self.formLayout.addRow("Statut :", self.comboStatus)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(CotisationFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/custom_fields_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/custom_fields_tab.py
Rôle : Onglet gestion des champs personnalisés (CustomFieldsTab) du Club Manager.
Hérite de QWidget et de Ui_CustomFieldsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CustomFieldsTab généré par pyuic5 à partir de resources/ui/custom_fields_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.custom_fields_tab_ui import Ui_CustomFieldsTab

class CustomFieldsTab(QtWidgets.QWidget, Ui_CustomFieldsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddCustomField.clicked.connect(self.add_custom_field)
        self.buttonEditCustomField.clicked.connect(self.edit_custom_field)
        self.buttonDeleteCustomField.clicked.connect(self.delete_custom_field)
        self.buttonExportCustomFields.clicked.connect(self.export_custom_fields)
        self.tableCustomFields.doubleClicked.connect(self.edit_custom_field)

    def add_custom_field(self):
        from club_manager.ui.custom_field_form_dialog import CustomFieldFormDialog
        dlg = CustomFieldFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_custom_fields()

    def edit_custom_field(self):
        # Logique de modification du champ personnalisé sélectionné
        pass

    def delete_custom_field(self):
        # Logique de suppression du/des champs personnalisés sélectionnés
        pass

    def export_custom_fields(self):
        # Exporter les champs personnalisés
        pass

    def refresh_custom_fields(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/custom_fields_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/custom_fields_tab.ui
Classe : Ui_CustomFieldsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CustomFieldsTab(object):
    def setupUi(self, CustomFieldsTab):
        CustomFieldsTab.setObjectName("CustomFieldsTab")
        CustomFieldsTab.resize(700, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(CustomFieldsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddCustomField = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonAddCustomField.setText("Ajouter")
        self.buttonEditCustomField = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonEditCustomField.setText("Modifier")
        self.buttonDeleteCustomField = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonDeleteCustomField.setText("Supprimer")
        self.buttonExportCustomFields = QtWidgets.QPushButton(CustomFieldsTab)
        self.buttonExportCustomFields.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddCustomField)
        self.horizontalLayoutTop.addWidget(self.buttonEditCustomField)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteCustomField)
        self.horizontalLayoutTop.addWidget(self.buttonExportCustomFields)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableCustomFields = QtWidgets.QTableWidget(CustomFieldsTab)
        self.tableCustomFields.setColumnCount(4)
        self.tableCustomFields.setHorizontalHeaderLabels([
            "Nom", "Type", "Défaut", "Contraintes"
        ])
        self.verticalLayout.addWidget(self.tableCustomFields)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/custom_field_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/custom_field_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition de champ personnalisé.
Hérite de QDialog et Ui_CustomFieldFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_CustomFieldFormDialog généré par pyuic5 à partir de resources/ui/custom_field_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.custom_field_form_dialog_ui import Ui_CustomFieldFormDialog

class CustomFieldFormDialog(QtWidgets.QDialog, Ui_CustomFieldFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # Connexion : type change => options dynamiques
        self.comboType.currentTextChanged.connect(self.change_type)

    def change_type(self, type_str):
        # Afficher/masquer options selon type
        if type_str == "Choix":
            self.editOptions.setEnabled(True)
        else:
            self.editOptions.setEnabled(False)
            self.editOptions.clear()

    def accept(self):
        # Validation minimal
        if not self.editName.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Le nom du champ est obligatoire.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/custom_field_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/custom_field_form_dialog.ui
Classe : Ui_CustomFieldFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_CustomFieldFormDialog(object):
    def setupUi(self, CustomFieldFormDialog):
        CustomFieldFormDialog.setObjectName("CustomFieldFormDialog")
        CustomFieldFormDialog.resize(400, 230)
        self.verticalLayout = QtWidgets.QVBoxLayout(CustomFieldFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editName = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.formLayout.addRow("Nom du champ :", self.editName)
        self.comboType = QtWidgets.QComboBox(CustomFieldFormDialog)
        self.comboType.addItems(["Texte", "Numérique", "Date", "Choix", "Booléen"])
        self.formLayout.addRow("Type :", self.comboType)
        self.editDefault = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.formLayout.addRow("Valeur par défaut :", self.editDefault)
        self.editOptions = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.editOptions.setPlaceholderText("Séparés par virgules")
        self.editOptions.setEnabled(False)
        self.formLayout.addRow("Options (si Choix) :", self.editOptions)
        self.editConstraints = QtWidgets.QLineEdit(CustomFieldFormDialog)
        self.formLayout.addRow("Contraintes :", self.editConstraints)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(CustomFieldFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/doc_viewer_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/doc_viewer_dialog.py
Rôle : Fenêtre modale de visualisation de la documentation embarquée.
Hérite de QDialog et Ui_DocViewerDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_DocViewerDialog généré par pyuic5 à partir de resources/ui/doc_viewer_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.doc_viewer_dialog_ui import Ui_DocViewerDialog

class DocViewerDialog(QtWidgets.QDialog, Ui_DocViewerDialog):
    def __init__(self, parent=None, html_content=""):
        super().__init__(parent)
        self.setupUi(self)
        self.textBrowser.setHtml(html_content)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/doc_viewer_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/doc_viewer_dialog.ui
Classe : Ui_DocViewerDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_DocViewerDialog(object):
    def setupUi(self, DocViewerDialog):
        DocViewerDialog.setObjectName("DocViewerDialog")
        DocViewerDialog.resize(600, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(DocViewerDialog)
        self.textBrowser = QtWidgets.QTextBrowser(DocViewerDialog)
        self.verticalLayout.addWidget(self.textBrowser)
        self.buttonBox = QtWidgets.QDialogButtonBox(DocViewerDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/error_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/error_dialog.py
Rôle : Fenêtre modale d'affichage d'une erreur critique ou bloquante.
Hérite de QDialog et Ui_ErrorDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ErrorDialog généré par pyuic5 à partir de resources/ui/error_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.error_dialog_ui import Ui_ErrorDialog

class ErrorDialog(QtWidgets.QDialog, Ui_ErrorDialog):
    def __init__(self, parent=None, error_message="Une erreur est survenue."):
        super().__init__(parent)
        self.setupUi(self)
        self.labelError.setText(error_message)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/error_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/error_dialog.ui
Classe : Ui_ErrorDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ErrorDialog(object):
    def setupUi(self, ErrorDialog):
        ErrorDialog.setObjectName("ErrorDialog")
        ErrorDialog.resize(420, 140)
        self.verticalLayout = QtWidgets.QVBoxLayout(ErrorDialog)
        self.labelError = QtWidgets.QLabel(ErrorDialog)
        self.labelError.setText("Une erreur est survenue.")
        self.labelError.setAlignment(QtCore.Qt.AlignCenter)
        self.labelError.setWordWrap(True)
        self.verticalLayout.addWidget(self.labelError)
        self.buttonBox = QtWidgets.QDialogButtonBox(ErrorDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/exports_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/exports_tab.py
Rôle : Onglet exports (ExportsTab) du Club Manager.
Hérite de QWidget et de Ui_ExportsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ExportsTab généré par pyuic5 à partir de resources/ui/exports_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.exports_tab_ui import Ui_ExportsTab

class ExportsTab(QtWidgets.QWidget, Ui_ExportsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonExportCSV.clicked.connect(self.export_csv)
        self.buttonExportPDF.clicked.connect(self.export_pdf)
        self.buttonSelectFields.clicked.connect(self.select_fields)

    def export_csv(self):
        # Exporter les données en CSV
        pass

    def export_pdf(self):
        # Exporter les données en PDF
        pass

    def select_fields(self):
        # Ouvrir un dialog pour sélectionner les champs à exporter
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/exports_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/exports_tab.ui
Classe : Ui_ExportsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ExportsTab(object):
    def setupUi(self, ExportsTab):
        ExportsTab.setObjectName("ExportsTab")
        ExportsTab.resize(700, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(ExportsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonExportCSV = QtWidgets.QPushButton(ExportsTab)
        self.buttonExportCSV.setText("Exporter CSV")
        self.buttonExportPDF = QtWidgets.QPushButton(ExportsTab)
        self.buttonExportPDF.setText("Exporter PDF")
        self.buttonSelectFields = QtWidgets.QPushButton(ExportsTab)
        self.buttonSelectFields.setText("Champs à exporter")
        self.horizontalLayoutTop.addWidget(self.buttonExportCSV)
        self.horizontalLayoutTop.addWidget(self.buttonExportPDF)
        self.horizontalLayoutTop.addWidget(self.buttonSelectFields)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tablePreview = QtWidgets.QTableWidget(ExportsTab)
        self.tablePreview.setColumnCount(0)
        self.tablePreview.setRowCount(0)
        self.verticalLayout.addWidget(self.tablePreview)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/export_fields_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/export_fields_dialog.py
Rôle : Fenêtre modale de sélection des champs à exporter.
Hérite de QDialog et Ui_ExportFieldsDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ExportFieldsDialog généré par pyuic5 à partir de resources/ui/export_fields_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.export_fields_dialog_ui import Ui_ExportFieldsDialog

class ExportFieldsDialog(QtWidgets.QDialog, Ui_ExportFieldsDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # Connexion logique si besoin
        self.checkAllFields.toggled.connect(self.toggle_all_fields)

    def toggle_all_fields(self, checked):
        for i in range(self.listFields.count()):
            item = self.listFields.item(i)
            item.setCheckState(QtCore.Qt.Checked if checked else QtCore.Qt.Unchecked)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/export_fields_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/export_fields_dialog.ui
Classe : Ui_ExportFieldsDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ExportFieldsDialog(object):
    def setupUi(self, ExportFieldsDialog):
        ExportFieldsDialog.setObjectName("ExportFieldsDialog")
        ExportFieldsDialog.resize(350, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(ExportFieldsDialog)
        self.checkAllFields = QtWidgets.QCheckBox(ExportFieldsDialog)
        self.checkAllFields.setText("Tout sélectionner")
        self.verticalLayout.addWidget(self.checkAllFields)
        self.listFields = QtWidgets.QListWidget(ExportFieldsDialog)
        self.listFields.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.verticalLayout.addWidget(self.listFields)
        self.buttonBox = QtWidgets.QDialogButtonBox(ExportFieldsDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/mailing_recipients_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/mailing_recipients_dialog.py
Rôle : Fenêtre modale de sélection des destinataires du mailing.
Hérite de QDialog et Ui_MailingRecipientsDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_MailingRecipientsDialog généré par pyuic5 à partir de resources/ui/mailing_recipients_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.mailing_recipients_dialog_ui import Ui_MailingRecipientsDialog

class MailingRecipientsDialog(QtWidgets.QDialog, Ui_MailingRecipientsDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # TODO: wiring logique sélection/désélection groupée si besoin
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/mailing_recipients_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/mailing_recipients_dialog.ui
Classe : Ui_MailingRecipientsDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MailingRecipientsDialog(object):
    def setupUi(self, MailingRecipientsDialog):
        MailingRecipientsDialog.setObjectName("MailingRecipientsDialog")
        MailingRecipientsDialog.resize(400, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(MailingRecipientsDialog)
        self.labelInfo = QtWidgets.QLabel(MailingRecipientsDialog)
        self.labelInfo.setText("Sélectionnez les destinataires du mailing :")
        self.verticalLayout.addWidget(self.labelInfo)
        self.listRecipients = QtWidgets.QListWidget(MailingRecipientsDialog)
        self.listRecipients.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.verticalLayout.addWidget(self.listRecipients)
        self.buttonBox = QtWidgets.QDialogButtonBox(MailingRecipientsDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/mailing_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/mailing_tab.py
Rôle : Onglet mailing (MailingTab) du Club Manager.
Hérite de QWidget et de Ui_MailingTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_MailingTab généré par pyuic5 à partir de resources/ui/mailing_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.mailing_tab_ui import Ui_MailingTab

class MailingTab(QtWidgets.QWidget, Ui_MailingTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonSendMail.clicked.connect(self.send_mail)
        self.buttonPreviewMail.clicked.connect(self.preview_mail)
        self.buttonSelectRecipients.clicked.connect(self.select_recipients)

    def send_mail(self):
        # Logique d'envoi de mail groupé
        pass

    def preview_mail(self):
        # Afficher un aperçu du mail groupé
        pass

    def select_recipients(self):
        # Sélectionner les destinataires (ouvre un dialog)
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/mailing_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/mailing_tab.ui
Classe : Ui_MailingTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MailingTab(object):
    def setupUi(self, MailingTab):
        MailingTab.setObjectName("MailingTab")
        MailingTab.resize(700, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(MailingTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonSendMail = QtWidgets.QPushButton(MailingTab)
        self.buttonSendMail.setText("Envoyer")
        self.buttonPreviewMail = QtWidgets.QPushButton(MailingTab)
        self.buttonPreviewMail.setText("Prévisualiser")
        self.buttonSelectRecipients = QtWidgets.QPushButton(MailingTab)
        self.buttonSelectRecipients.setText("Sélection destinataires")
        self.horizontalLayoutTop.addWidget(self.buttonSendMail)
        self.horizontalLayoutTop.addWidget(self.buttonPreviewMail)
        self.horizontalLayoutTop.addWidget(self.buttonSelectRecipients)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.textEditMail = QtWidgets.QTextEdit(MailingTab)
        self.textEditMail.setPlaceholderText("Rédigez votre message ici...")
        self.verticalLayout.addWidget(self.textEditMail)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/main_window.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/main_window.py
Rôle : Fenêtre principale du Club Manager.
Correction PRIORITAIRE : Ajout explicite des widgets métiers dans chaque onglet du QTabWidget.
Points clés :
- Charge main_window.ui (QTabWidget principal)
- Instancie et insère chaque widget métier (MembersTab, PositionsTab, SessionsTab, CotisationsTab, CustomFieldsTab, AuditTab, etc.)
- Garantit que chaque bouton/action de chaque onglet est pleinement fonctionnel (slots connectés)
- Connexions menu (quitter, audit, RGPD, doc...) opérationnelles
- AUCUN widget global, respect cycle de vie QApplication
- PyQt5, Python 3.8+, PEP8, code prêt à coller/remplacer

Dépendances (pip install):
- PyQt5
"""

import sys
import logging
from PyQt5 import QtWidgets
from PyQt5.uic import loadUi

# Imports explicites des widgets métiers (chaque module .py/.ui doit exister et être correct)
from club_manager.ui.members_tab import MembersTab
from club_manager.ui.positions_tab import PositionsTab
from club_manager.ui.sessions_tab import SessionsTab
from club_manager.ui.cotisations_tab import CotisationsTab
from club_manager.ui.custom_fields_tab import CustomFieldsTab
from club_manager.ui.audit_tab import AuditTab
from club_manager.ui.exports_tab import ExportsTab
from club_manager.ui.mailing_tab import MailingTab
from club_manager.ui.theming_tab import ThemingTab
from club_manager.ui.backup_tab import BackupTab

# Optionnel : extensions/fenêtres modales
from club_manager.ui.member_form_dialog import MemberFormDialog
from club_manager.ui.position_form_dialog import PositionFormDialog
from club_manager.ui.session_form_dialog import SessionFormDialog
from club_manager.ui.cotisation_form_dialog import CotisationFormDialog
from club_manager.ui.custom_field_form_dialog import CustomFieldFormDialog

# Gestion i18n centralisée
from club_manager.i18n import setup_translations, switch_language, get_translator

class MainWindow(QtWidgets.QMainWindow):
    """
    Fenêtre principale de l'application Club Manager.
    Gère l'affichage et l'injection dynamique de tous les widgets métiers dans le QTabWidget.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Chargement de l'UI principale (main_window.ui)
        try:
            loadUi("resources/ui/main_window.ui", self)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Erreur UI", f"Impossible de charger l'UI principale : {e}")
            logging.exception("Erreur lors du chargement de main_window.ui")
            sys.exit(1)

        # Injection explicite des widgets métiers dans chaque onglet du QTabWidget
        try:
            # Onglet Membres (index 0)
            self.members_tab = MembersTab(self)
            self._replace_tab_widget(0, self.members_tab)

            # Onglet Postes (index 1)
            self.positions_tab = PositionsTab(self)
            self._replace_tab_widget(1, self.positions_tab)

            # Onglet Sessions (index 2)
            self.sessions_tab = SessionsTab(self)
            self._replace_tab_widget(2, self.sessions_tab)

            # Onglet Cotisations (index 3)
            self.cotisations_tab = CotisationsTab(self)
            self._replace_tab_widget(3, self.cotisations_tab)

            # Onglet Champs personnalisés (index 4)
            self.custom_fields_tab = CustomFieldsTab(self)
            self._replace_tab_widget(4, self.custom_fields_tab)

            # Onglet Audit (index 5)
            self.audit_tab = AuditTab(self)
            self._replace_tab_widget(5, self.audit_tab)

            # Onglet Exports (index 6)
            self.exports_tab = ExportsTab(self)
            self._replace_tab_widget(6, self.exports_tab)

            # Onglet Mailing (index 7)
            self.mailing_tab = MailingTab(self)
            self._replace_tab_widget(7, self.mailing_tab)

            # Onglet Thématisation (index 8)
            self.theming_tab = ThemingTab(self)
            self._replace_tab_widget(8, self.theming_tab)

            # Onglet Sauvegarde/Restaurer (index 9)
            self.backup_tab = BackupTab(self)
            self._replace_tab_widget(9, self.backup_tab)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Erreur", f"Erreur lors de l'injection des widgets métiers : {e}")
            logging.exception("Erreur lors de l'injection des widgets métiers")
            sys.exit(1)

        # Connexions des actions du menu principal
        self._connect_menu_actions()

    def _replace_tab_widget(self, tab_index: int, widget: QtWidgets.QWidget):
        """
        Remplace le contenu d'un onglet du QTabWidget par un widget métier custom.
        """
        tab = self.tabWidget.widget(tab_index)
        # On nettoie le layout existant (si nécessaire)
        if tab.layout() is None:
            layout = QtWidgets.QVBoxLayout(tab)
            tab.setLayout(layout)
        else:
            layout = tab.layout()
            # On retire les widgets existants
            while layout.count():
                child = layout.takeAt(0)
                if child.widget():
                    child.widget().setParent(None)
        layout.addWidget(widget)

    def _connect_menu_actions(self):
        """
        Connexion de tous les menus/actions principaux.
        Les actions doivent exister dans le .ui (sinon, générer le .ui correspondant).
        """
        try:
            # Action Quitter
            self.actionQuitter.triggered.connect(self.close)
            # Action Audit : afficher l'onglet Audit
            self.actionAudit.triggered.connect(lambda: self.tabWidget.setCurrentIndex(5))
            # Action RGPD : afficher la documentation RGPD ou ouvrir la boîte de dialogue RGPD
            self.actionRGPD.triggered.connect(self._open_rgpd_dialog)
            # Action Documentation : ouvrir la doc utilisateur
            self.actionDocumentation.triggered.connect(self._open_documentation)
            # Action Sauvegarde : switch onglet
            self.actionSauvegarder.triggered.connect(lambda: self.tabWidget.setCurrentIndex(9))
            # Action Thème : switch onglet
            self.actionTheme.triggered.connect(lambda: self.tabWidget.setCurrentIndex(8))
            # Action Export : switch onglet
            self.actionExporter.triggered.connect(lambda: self.tabWidget.setCurrentIndex(6))
            # Action Mailing : switch onglet
            self.actionMailing.triggered.connect(lambda: self.tabWidget.setCurrentIndex(7))
            # Action Changer de langue
            self.actionChanger_de_langue.triggered.connect(self._switch_language)
        except Exception as e:
            logging.warning(f"Erreur lors de la connexion des actions de menu : {e}")

    def _open_rgpd_dialog(self):
        QtWidgets.QMessageBox.information(self, "RGPD", "Documentation RGPD et options de purge/anonymisation.")

    def _open_documentation(self):
        QtWidgets.QMessageBox.information(self, "Documentation", "Ouvrir la documentation utilisateur/de développement.")

    def _switch_language(self):
        try:
            switch_language()
            QtWidgets.QMessageBox.information(self, "Langue", "Langue changée. Veuillez redémarrer l'application pour que tous les changements prennent effet.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "Erreur langue", f"Impossible de changer la langue : {e}")

# Guide d'extension :
# - Pour ajouter un nouvel onglet, créer le couple club_manager/ui/{nom}_tab.py + resources/ui/{nom}_tab.ui
# - Importer ici, instancier, puis appeler self._replace_tab_widget(nouvel_index, nouvel_objet)
# - Ajouter l'action de menu associée dans le .ui et la connecter dans _connect_menu_actions

```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/members_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/members_tab.py
Rôle : Onglet gestion des adhérents (MembersTab) du Club Manager.
Hérite de QWidget et de Ui_MembersTab.
Tous les boutons/actions sont connectés à des slots effectifs dans la classe.
Dépendances : PyQt5, Ui_MembersTab généré par pyuic5 à partir de resources/ui/members_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.members_tab_ui import Ui_MembersTab

class MembersTab(QtWidgets.QWidget, Ui_MembersTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        # Connexion des boutons du tab à leur logique
        self.buttonAddMember.clicked.connect(self.add_member)
        self.buttonEditMember.clicked.connect(self.edit_member)
        self.buttonDeleteMember.clicked.connect(self.delete_member)
        self.buttonExportMembers.clicked.connect(self.export_members)
        self.buttonFilter.clicked.connect(self.filter_members)
        self.buttonResetFilter.clicked.connect(self.reset_filter)
        self.buttonMailing.clicked.connect(self.do_mailing)
        self.tableMembers.doubleClicked.connect(self.edit_member)
        # TODO : Connexions additionnelles selon les besoins

    def add_member(self):
        # Logique d'ajout d'un adhérent (ouvre le dialog)
        from club_manager.ui.member_form_dialog import MemberFormDialog
        dlg = MemberFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            # Ajout effectif du membre, recharge table
            self.refresh_members()
    
    def edit_member(self):
        # Logique de modification d'un adhérent sélectionné
        # TODO: Récupérer l'ID du membre sélectionné
        pass

    def delete_member(self):
        # Logique de suppression d'un ou plusieurs membres sélectionnés
        pass

    def export_members(self):
        # Logique d'export CSV/PDF de la liste actuelle
        pass

    def filter_members(self):
        # Logique de filtrage multicritère
        pass

    def reset_filter(self):
        # Réinitialise tous les filtres
        pass

    def do_mailing(self):
        # Lancer le module de mailing sur sélection
        pass

    def refresh_members(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/members_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/members_tab.ui
Classe : Ui_MembersTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MembersTab(object):
    def setupUi(self, MembersTab):
        MembersTab.setObjectName("MembersTab")
        MembersTab.resize(900, 600)
        self.verticalLayout = QtWidgets.QVBoxLayout(MembersTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddMember = QtWidgets.QPushButton(MembersTab)
        self.buttonAddMember.setText("Ajouter")
        self.buttonEditMember = QtWidgets.QPushButton(MembersTab)
        self.buttonEditMember.setText("Modifier")
        self.buttonDeleteMember = QtWidgets.QPushButton(MembersTab)
        self.buttonDeleteMember.setText("Supprimer")
        self.buttonExportMembers = QtWidgets.QPushButton(MembersTab)
        self.buttonExportMembers.setText("Exporter")
        self.buttonMailing = QtWidgets.QPushButton(MembersTab)
        self.buttonMailing.setText("Mailing")
        self.horizontalLayoutTop.addWidget(self.buttonAddMember)
        self.horizontalLayoutTop.addWidget(self.buttonEditMember)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteMember)
        self.horizontalLayoutTop.addWidget(self.buttonExportMembers)
        self.horizontalLayoutTop.addWidget(self.buttonMailing)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableMembers = QtWidgets.QTableWidget(MembersTab)
        self.tableMembers.setColumnCount(10)
        self.tableMembers.setHorizontalHeaderLabels([
            "Nom", "Prénom", "Adresse", "CP", "Ville", "Tél", "Mail", "RGPD", "Droit image", "Cotisation"
        ])
        self.verticalLayout.addWidget(self.tableMembers)
        self.horizontalLayoutFilter = QtWidgets.QHBoxLayout()
        self.buttonFilter = QtWidgets.QPushButton(MembersTab)
        self.buttonFilter.setText("Filtrer")
        self.buttonResetFilter = QtWidgets.QPushButton(MembersTab)
        self.buttonResetFilter.setText("Réinitialiser")
        self.horizontalLayoutFilter.addWidget(self.buttonFilter)
        self.horizontalLayoutFilter.addWidget(self.buttonResetFilter)
        self.verticalLayout.addLayout(self.horizontalLayoutFilter)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/member_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/member_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition d'adhérent.
Hérite de QDialog et Ui_MemberFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_MemberFormDialog généré par pyuic5 à partir de resources/ui/member_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.member_form_dialog_ui import Ui_MemberFormDialog

class MemberFormDialog(QtWidgets.QDialog, Ui_MemberFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # Connexions logiques live :
        self.checkMultiClub.toggled.connect(self.toggle_multi_club_fields)
        self.checkMJCElsewhere.toggled.connect(self.toggle_mjc_elsewhere_fields)

    def toggle_multi_club_fields(self, checked):
        self.editExternalClub.setEnabled(checked)
        if not checked:
            self.editExternalClub.clear()

    def toggle_mjc_elsewhere_fields(self, checked):
        self.editMJCClub.setEnabled(checked)
        if not checked:
            self.editMJCClub.clear()

    def accept(self):
        # TODO: validation des champs, RGPD, etc.
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/member_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/member_form_dialog.ui
Classe : Ui_MemberFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_MemberFormDialog(object):
    def setupUi(self, MemberFormDialog):
        MemberFormDialog.setObjectName("MemberFormDialog")
        MemberFormDialog.resize(600, 700)
        self.verticalLayout = QtWidgets.QVBoxLayout(MemberFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editLastName = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Nom :", self.editLastName)
        self.editFirstName = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Prénom :", self.editFirstName)
        self.editAddress = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Adresse :", self.editAddress)
        self.editPostalCode = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Code postal :", self.editPostalCode)
        self.editCity = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Ville :", self.editCity)
        self.editPhone = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("N° de tél. :", self.editPhone)
        self.editMail = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Mail :", self.editMail)
        self.checkRGPD = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkRGPD.setText("Consentement RGPD (obligatoire)")
        self.formLayout.addRow(self.checkRGPD)
        self.checkImageRights = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkImageRights.setText("Droit à l'image accepté")
        self.formLayout.addRow(self.checkImageRights)
        self.editHealth = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Fiche santé :", self.editHealth)
        self.checkANCV = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkANCV.setText("Paiement ANCV")
        self.formLayout.addRow(self.checkANCV)
        self.editCash = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Espèce :", self.editCash)
        self.editCheque1 = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Chèque 1 :", self.editCheque1)
        self.editCheque2 = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Chèque 2 :", self.editCheque2)
        self.editCheque3 = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Chèque 3 :", self.editCheque3)
        self.editTotalPaid = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Total payé :", self.editTotalPaid)
        self.editClubPart = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Part adhésion club :", self.editClubPart)
        self.editMJCPart = QtWidgets.QLineEdit(MemberFormDialog)
        self.formLayout.addRow("Part adhésion MJC :", self.editMJCPart)
        self.checkMultiClub = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkMultiClub.setText("Déjà membre d'un autre club")
        self.formLayout.addRow(self.checkMultiClub)
        self.editExternalClub = QtWidgets.QLineEdit(MemberFormDialog)
        self.editExternalClub.setPlaceholderText("Nom du club externe")
        self.editExternalClub.setEnabled(False)
        self.formLayout.addRow("Club externe :", self.editExternalClub)
        self.checkMJCElsewhere = QtWidgets.QCheckBox(MemberFormDialog)
        self.checkMJCElsewhere.setText("Part MJC déjà réglée ailleurs")
        self.formLayout.addRow(self.checkMJCElsewhere)
        self.editMJCClub = QtWidgets.QLineEdit(MemberFormDialog)
        self.editMJCClub.setPlaceholderText("Nom du club où la part MJC a été réglée")
        self.editMJCClub.setEnabled(False)
        self.formLayout.addRow("Club MJC réglé :", self.editMJCClub)
        self.buttonBox = QtWidgets.QDialogButtonBox(MemberFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addLayout(self.formLayout)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/positions_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/positions_tab.py
Rôle : Onglet gestion des postes (PositionsTab) du Club Manager.
Hérite de QWidget et de Ui_PositionsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_PositionsTab généré par pyuic5 à partir de resources/ui/positions_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.positions_tab_ui import Ui_PositionsTab

class PositionsTab(QtWidgets.QWidget, Ui_PositionsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddPosition.clicked.connect(self.add_position)
        self.buttonEditPosition.clicked.connect(self.edit_position)
        self.buttonDeletePosition.clicked.connect(self.delete_position)
        self.buttonExportPositions.clicked.connect(self.export_positions)
        self.tablePositions.doubleClicked.connect(self.edit_position)
        self.buttonAffect.clicked.connect(self.affect_position)
        self.buttonUnaffect.clicked.connect(self.unaffect_position)

    def add_position(self):
        from club_manager.ui.position_form_dialog import PositionFormDialog
        dlg = PositionFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_positions()

    def edit_position(self):
        # Logique de modification du poste sélectionné
        pass

    def delete_position(self):
        # Logique de suppression du/des postes sélectionnés
        pass

    def export_positions(self):
        # Exporter les postes
        pass

    def affect_position(self):
        # Affecter un poste à un membre
        pass

    def unaffect_position(self):
        # Désaffecter un poste d'un membre
        pass

    def refresh_positions(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/positions_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/positions_tab.ui
Classe : Ui_PositionsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_PositionsTab(object):
    def setupUi(self, PositionsTab):
        PositionsTab.setObjectName("PositionsTab")
        PositionsTab.resize(700, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(PositionsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddPosition = QtWidgets.QPushButton(PositionsTab)
        self.buttonAddPosition.setText("Ajouter")
        self.buttonEditPosition = QtWidgets.QPushButton(PositionsTab)
        self.buttonEditPosition.setText("Modifier")
        self.buttonDeletePosition = QtWidgets.QPushButton(PositionsTab)
        self.buttonDeletePosition.setText("Supprimer")
        self.buttonExportPositions = QtWidgets.QPushButton(PositionsTab)
        self.buttonExportPositions.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddPosition)
        self.horizontalLayoutTop.addWidget(self.buttonEditPosition)
        self.horizontalLayoutTop.addWidget(self.buttonDeletePosition)
        self.horizontalLayoutTop.addWidget(self.buttonExportPositions)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tablePositions = QtWidgets.QTableWidget(PositionsTab)
        self.tablePositions.setColumnCount(3)
        self.tablePositions.setHorizontalHeaderLabels([
            "Poste", "Type", "Affecté à"
        ])
        self.verticalLayout.addWidget(self.tablePositions)
        self.horizontalLayoutBottom = QtWidgets.QHBoxLayout()
        self.buttonAffect = QtWidgets.QPushButton(PositionsTab)
        self.buttonAffect.setText("Affecter à un membre")
        self.buttonUnaffect = QtWidgets.QPushButton(PositionsTab)
        self.buttonUnaffect.setText("Désaffecter")
        self.horizontalLayoutBottom.addWidget(self.buttonAffect)
        self.horizontalLayoutBottom.addWidget(self.buttonUnaffect)
        self.verticalLayout.addLayout(self.horizontalLayoutBottom)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/position_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/position_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition d'un poste.
Hérite de QDialog et Ui_PositionFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_PositionFormDialog généré par pyuic5 à partir de resources/ui/position_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.position_form_dialog_ui import Ui_PositionFormDialog

class PositionFormDialog(QtWidgets.QDialog, Ui_PositionFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # TODO: Ajoutez la logique de validation, etc.

    def accept(self):
        # Validation des champs (exemple minimal)
        if not self.editName.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Le nom du poste est obligatoire.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/position_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/position_form_dialog.ui
Classe : Ui_PositionFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_PositionFormDialog(object):
    def setupUi(self, PositionFormDialog):
        PositionFormDialog.setObjectName("PositionFormDialog")
        PositionFormDialog.resize(400, 200)
        self.verticalLayout = QtWidgets.QVBoxLayout(PositionFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editName = QtWidgets.QLineEdit(PositionFormDialog)
        self.formLayout.addRow("Nom du poste :", self.editName)
        self.comboType = QtWidgets.QComboBox(PositionFormDialog)
        self.comboType.addItems(["Staff", "Gestion", "Trésorier", "Président", "Autre"])
        self.formLayout.addRow("Type :", self.comboType)
        self.editDescription = QtWidgets.QLineEdit(PositionFormDialog)
        self.formLayout.addRow("Description :", self.editDescription)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(PositionFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/rgpd_purge_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/rgpd_purge_dialog.py
Rôle : Fenêtre modale pour lancer/valider la purge RGPD.
Hérite de QDialog et Ui_RgpdPurgeDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_RgpdPurgeDialog généré par pyuic5 à partir de resources/ui/rgpd_purge_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.rgpd_purge_dialog_ui import Ui_RgpdPurgeDialog

class RgpdPurgeDialog(QtWidgets.QDialog, Ui_RgpdPurgeDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/rgpd_purge_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/rgpd_purge_dialog.ui
Classe : Ui_RgpdPurgeDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_RgpdPurgeDialog(object):
    def setupUi(self, RgpdPurgeDialog):
        RgpdPurgeDialog.setObjectName("RgpdPurgeDialog")
        RgpdPurgeDialog.resize(420, 180)
        self.verticalLayout = QtWidgets.QVBoxLayout(RgpdPurgeDialog)
        self.labelWarning = QtWidgets.QLabel(RgpdPurgeDialog)
        self.labelWarning.setText(
            "<b>Attention !</b><br>Cet outil lance une purge/anonymisation RGPD irréversible.<br>Êtes-vous sûr de vouloir continuer ?"
        )
        self.labelWarning.setAlignment(QtCore.Qt.AlignCenter)
        self.labelWarning.setWordWrap(True)
        self.verticalLayout.addWidget(self.labelWarning)
        self.checkUnderstand = QtWidgets.QCheckBox(RgpdPurgeDialog)
        self.checkUnderstand.setText("J'ai compris les conséquences de cette action.")
        self.verticalLayout.addWidget(self.checkUnderstand)
        self.buttonBox = QtWidgets.QDialogButtonBox(RgpdPurgeDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/sessions_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/sessions_tab.py
Rôle : Onglet gestion des sessions (SessionsTab) du Club Manager.
Hérite de QWidget et de Ui_SessionsTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_SessionsTab généré par pyuic5 à partir de resources/ui/sessions_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.sessions_tab_ui import Ui_SessionsTab

class SessionsTab(QtWidgets.QWidget, Ui_SessionsTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonAddSession.clicked.connect(self.add_session)
        self.buttonEditSession.clicked.connect(self.edit_session)
        self.buttonDeleteSession.clicked.connect(self.delete_session)
        self.buttonExportSessions.clicked.connect(self.export_sessions)
        self.tableSessions.doubleClicked.connect(self.edit_session)
        self.buttonSetCurrent.clicked.connect(self.set_current_session)

    def add_session(self):
        from club_manager.ui.session_form_dialog import SessionFormDialog
        dlg = SessionFormDialog(self)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_sessions()

    def edit_session(self):
        # Logique de modification de la session sélectionnée
        pass

    def delete_session(self):
        # Logique de suppression de la/des sessions sélectionnées
        pass

    def export_sessions(self):
        # Exporter les sessions
        pass

    def set_current_session(self):
        # Définir la session courante
        pass

    def refresh_sessions(self):
        # Recharge la table depuis la base
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/sessions_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/sessions_tab.ui
Classe : Ui_SessionsTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_SessionsTab(object):
    def setupUi(self, SessionsTab):
        SessionsTab.setObjectName("SessionsTab")
        SessionsTab.resize(700, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(SessionsTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonAddSession = QtWidgets.QPushButton(SessionsTab)
        self.buttonAddSession.setText("Ajouter")
        self.buttonEditSession = QtWidgets.QPushButton(SessionsTab)
        self.buttonEditSession.setText("Modifier")
        self.buttonDeleteSession = QtWidgets.QPushButton(SessionsTab)
        self.buttonDeleteSession.setText("Supprimer")
        self.buttonExportSessions = QtWidgets.QPushButton(SessionsTab)
        self.buttonExportSessions.setText("Exporter")
        self.horizontalLayoutTop.addWidget(self.buttonAddSession)
        self.horizontalLayoutTop.addWidget(self.buttonEditSession)
        self.horizontalLayoutTop.addWidget(self.buttonDeleteSession)
        self.horizontalLayoutTop.addWidget(self.buttonExportSessions)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.tableSessions = QtWidgets.QTableWidget(SessionsTab)
        self.tableSessions.setColumnCount(4)
        self.tableSessions.setHorizontalHeaderLabels([
            "Nom", "Début", "Fin", "Courante"
        ])
        self.verticalLayout.addWidget(self.tableSessions)
        self.buttonSetCurrent = QtWidgets.QPushButton(SessionsTab)
        self.buttonSetCurrent.setText("Définir comme session courante")
        self.verticalLayout.addWidget(self.buttonSetCurrent)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/session_form_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/session_form_dialog.py
Rôle : Fenêtre modale d'ajout/édition de session.
Hérite de QDialog et Ui_SessionFormDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_SessionFormDialog généré par pyuic5 à partir de resources/ui/session_form_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.session_form_dialog_ui import Ui_SessionFormDialog

class SessionFormDialog(QtWidgets.QDialog, Ui_SessionFormDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

    def accept(self):
        # Validation minimal
        if not self.editSessionName.text():
            QtWidgets.QMessageBox.warning(self, "Erreur", "Le nom de la session est obligatoire.")
            return
        super().accept()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/session_form_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/session_form_dialog.ui
Classe : Ui_SessionFormDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_SessionFormDialog(object):
    def setupUi(self, SessionFormDialog):
        SessionFormDialog.setObjectName("SessionFormDialog")
        SessionFormDialog.resize(400, 200)
        self.verticalLayout = QtWidgets.QVBoxLayout(SessionFormDialog)
        self.formLayout = QtWidgets.QFormLayout()
        self.editSessionName = QtWidgets.QLineEdit(SessionFormDialog)
        self.formLayout.addRow("Nom de la session :", self.editSessionName)
        self.dateStart = QtWidgets.QDateEdit(SessionFormDialog)
        self.dateStart.setCalendarPopup(True)
        self.formLayout.addRow("Date début :", self.dateStart)
        self.dateEnd = QtWidgets.QDateEdit(SessionFormDialog)
        self.dateEnd.setCalendarPopup(True)
        self.formLayout.addRow("Date fin :", self.dateEnd)
        self.editClubAmount = QtWidgets.QLineEdit(SessionFormDialog)
        self.formLayout.addRow("Part club :", self.editClubAmount)
        self.editMJCAmount = QtWidgets.QLineEdit(SessionFormDialog)
        self.formLayout.addRow("Part MJC :", self.editMJCAmount)
        self.verticalLayout.addLayout(self.formLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(SessionFormDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/theming_tab.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/theming_tab.py
Rôle : Onglet thématisation (ThemingTab) du Club Manager.
Hérite de QWidget et de Ui_ThemingTab.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_ThemingTab généré par pyuic5 à partir de resources/ui/theming_tab.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.theming_tab_ui import Ui_ThemingTab

class ThemingTab(QtWidgets.QWidget, Ui_ThemingTab):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonChooseTheme.clicked.connect(self.choose_theme)
        self.buttonImportLogo.clicked.connect(self.import_logo)
        self.buttonPreviewTheme.clicked.connect(self.preview_theme)

    def choose_theme(self):
        # Choisir un thème graphique
        pass

    def import_logo(self):
        # Importer un logo
        pass

    def preview_theme(self):
        # Prévisualiser le thème
        pass
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/theming_tab_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/theming_tab.ui
Classe : Ui_ThemingTab
"""

from PyQt5 import QtWidgets, QtCore

class Ui_ThemingTab(object):
    def setupUi(self, ThemingTab):
        ThemingTab.setObjectName("ThemingTab")
        ThemingTab.resize(600, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(ThemingTab)
        self.horizontalLayoutTop = QtWidgets.QHBoxLayout()
        self.buttonChooseTheme = QtWidgets.QPushButton(ThemingTab)
        self.buttonChooseTheme.setText("Choisir un thème")
        self.buttonImportLogo = QtWidgets.QPushButton(ThemingTab)
        self.buttonImportLogo.setText("Importer un logo")
        self.buttonPreviewTheme = QtWidgets.QPushButton(ThemingTab)
        self.buttonPreviewTheme.setText("Prévisualiser")
        self.horizontalLayoutTop.addWidget(self.buttonChooseTheme)
        self.horizontalLayoutTop.addWidget(self.buttonImportLogo)
        self.horizontalLayoutTop.addWidget(self.buttonPreviewTheme)
        self.verticalLayout.addLayout(self.horizontalLayoutTop)
        self.labelPreview = QtWidgets.QLabel(ThemingTab)
        self.labelPreview.setText("Aperçu du thème ici")
        self.labelPreview.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelPreview)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/tutorial_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/tutorial_dialog.py
Rôle : Fenêtre modale Tutoriel interactif embarqué, navigation pas-à-pas.
Hérite de QDialog et Ui_TutorialDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_TutorialDialog généré par pyuic5 à partir de resources/ui/tutorial_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.tutorial_dialog_ui import Ui_TutorialDialog

class TutorialDialog(QtWidgets.QDialog, Ui_TutorialDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonNext.clicked.connect(self.next_step)
        self.buttonPrev.clicked.connect(self.prev_step)
        self.buttonClose.clicked.connect(self.reject)
        self.steps = [
            "Bienvenue dans Club Manager !\n\nCe tutoriel vous guidera pour la prise en main.",
            "1. Onglet Membres : ajoutez, modifiez, recherchez vos adhérents.",
            "2. Onglet Postes : gérez les rôles (président, trésorier, staff...).",
            "3. Onglet Sessions : créez vos saisons/périodes.",
            "4. Onglet Cotisations : suivez paiements, relances, historiques.",
            "5. Champs personnalisés : ajoutez des informations spécifiques.",
            "6. Exports, Mailing, Sauvegarde, Audit... : tout est accessible en 1 clic !",
            "N'hésitez pas à consulter la documentation pour plus de détails."
        ]
        self.current_step = 0
        self.refresh_step()

    def refresh_step(self):
        self.labelStep.setText(self.steps[self.current_step])
        self.buttonPrev.setEnabled(self.current_step > 0)
        self.buttonNext.setEnabled(self.current_step < len(self.steps)-1)

    def next_step(self):
        if self.current_step < len(self.steps)-1:
            self.current_step += 1
            self.refresh_step()

    def prev_step(self):
        if self.current_step > 0:
            self.current_step -= 1
            self.refresh_step()
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/tutorial_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/tutorial_dialog.ui
Classe : Ui_TutorialDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_TutorialDialog(object):
    def setupUi(self, TutorialDialog):
        TutorialDialog.setObjectName("TutorialDialog")
        TutorialDialog.resize(500, 320)
        self.verticalLayout = QtWidgets.QVBoxLayout(TutorialDialog)
        self.labelStep = QtWidgets.QLabel(TutorialDialog)
        self.labelStep.setWordWrap(True)
        self.labelStep.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelStep)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.buttonPrev = QtWidgets.QPushButton(TutorialDialog)
        self.buttonPrev.setText("Précédent")
        self.buttonNext = QtWidgets.QPushButton(TutorialDialog)
        self.buttonNext.setText("Suivant")
        self.buttonClose = QtWidgets.QPushButton(TutorialDialog)
        self.buttonClose.setText("Fermer")
        self.horizontalLayout.addWidget(self.buttonPrev)
        self.horizontalLayout.addWidget(self.buttonNext)
        self.horizontalLayout.addWidget(self.buttonClose)
        self.verticalLayout.addLayout(self.horizontalLayout)
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/welcome_dialog.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier : club_manager/ui/welcome_dialog.py
Rôle : Fenêtre d'accueil au lancement (choix base, création nouvelle base, accès tutoriel/doc).
Hérite de QDialog et Ui_WelcomeDialog.
Connexion de tous les boutons/actions à des slots effectifs.
Dépendances : PyQt5, Ui_WelcomeDialog généré par pyuic5 à partir de resources/ui/welcome_dialog.ui
"""

from PyQt5 import QtWidgets
from club_manager.ui.welcome_dialog_ui import Ui_WelcomeDialog

class WelcomeDialog(QtWidgets.QDialog, Ui_WelcomeDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.buttonOpenDB.clicked.connect(self.open_db)
        self.buttonNewDB.clicked.connect(self.create_db)
        self.buttonTutorial.clicked.connect(self.open_tutorial)
        self.buttonDoc.clicked.connect(self.open_doc)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

    def open_db(self):
        fname, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Ouvrir une base existante", "", "Fichiers Club (*.db);;Tous les fichiers (*)")
        if fname:
            self.editDBPath.setText(fname)

    def create_db(self):
        fname, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Créer une nouvelle base", "", "Fichiers Club (*.db);;Tous les fichiers (*)")
        if fname:
            self.editDBPath.setText(fname)

    def open_tutorial(self):
        QtWidgets.QMessageBox.information(self, "Tutoriel", "Lancement du tutoriel interactif... (fonctionnalité à compléter)")

    def open_doc(self):
        QtWidgets.QMessageBox.information(self, "Documentation", "Ouverture de la documentation utilisateur...")
```


# ===== FICHIER SUIVANT =====

# === Fichier: club_manager/ui/welcome_dialog_ui.py ===

```python
# -*- coding: utf-8 -*-
"""
Fichier généré par pyuic5 à partir de resources/ui/welcome_dialog.ui
Classe : Ui_WelcomeDialog
"""

from PyQt5 import QtWidgets, QtCore

class Ui_WelcomeDialog(object):
    def setupUi(self, WelcomeDialog):
        WelcomeDialog.setObjectName("WelcomeDialog")
        WelcomeDialog.resize(500, 320)
        self.verticalLayout = QtWidgets.QVBoxLayout(WelcomeDialog)
        self.labelLogo = QtWidgets.QLabel(WelcomeDialog)
        self.labelLogo.setText("CLUB MANAGER")
        self.labelLogo.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelLogo)
        self.labelDesc = QtWidgets.QLabel(WelcomeDialog)
        self.labelDesc.setText("Bienvenue ! Choisissez une base existante ou créez-en une nouvelle.\nAccédez au tutoriel ou à la documentation à tout moment.")
        self.labelDesc.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.labelDesc)
        self.formLayout = QtWidgets.QFormLayout()
        self.editDBPath = QtWidgets.QLineEdit(WelcomeDialog)
        self.formLayout.addRow("Base de données :", self.editDBPath)
        self.buttonOpenDB = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonOpenDB.setText("Ouvrir une base existante")
        self.buttonNewDB = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonNewDB.setText("Créer une nouvelle base")
        self.formLayout.addRow(self.buttonOpenDB, self.buttonNewDB)
        self.verticalLayout.addLayout(self.formLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.buttonTutorial = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonTutorial.setText("Tutoriel interactif")
        self.buttonDoc = QtWidgets.QPushButton(WelcomeDialog)
        self.buttonDoc.setText("Documentation")
        self.horizontalLayout.addWidget(self.buttonTutorial)
        self.horizontalLayout.addWidget(self.buttonDoc)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.buttonBox = QtWidgets.QDialogButtonBox(WelcomeDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_audit.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.audit import log_action
from club_manager.core.database import Database

def test_log_action(tmp_path, monkeypatch):
    dbfile = tmp_path / "audit.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    log_action("MODIF", "admin", "members", "Test modification")
    rows = db.query("SELECT * FROM audit WHERE action='MODIF'")
    assert rows
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_custom_fields.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.custom_fields import add_custom_field, get_all_custom_fields, delete_custom_field
from club_manager.core.database import Database

def test_add_and_delete_custom_field(tmp_path, monkeypatch):
    dbfile = tmp_path / "cf.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    add_custom_field("Age", "Numérique", "", "", "")
    cfs = get_all_custom_fields()
    assert any(cf["name"] == "Age" for cf in cfs)
    field_id = [cf["id"] for cf in cfs if cf["name"] == "Age"][0]
    delete_custom_field(field_id)
    cfs = get_all_custom_fields()
    assert all(cf["name"] != "Age" for cf in cfs)
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_database.py ===

```python
# -*- coding: utf-8 -*-
import os
import tempfile
import pytest
from club_manager.core.database import Database

@pytest.fixture
def db():
    fd, path = tempfile.mkstemp()
    os.close(fd)
    db = Database(path)
    yield db
    db.close()
    os.remove(path)

def test_schema_creation(db):
    # Test presence of a table
    tables = db.query("SELECT name FROM sqlite_master WHERE type='table'")
    table_names = [t["name"] for t in tables]
    assert "members" in table_names
    assert "cotisations" in table_names

def test_insert_and_query_member(db):
    db.execute("INSERT INTO members (last_name, first_name) VALUES (?, ?)", ("Durand", "Paul"))
    rows = db.query("SELECT * FROM members WHERE last_name=?", ("Durand",))
    assert len(rows) == 1
    assert rows[0]["first_name"] == "Paul"
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_export.py ===

```python
# -*- coding: utf-8 -*-
import pandas as pd
from club_manager.core.export import export_members_csv

def test_export_members_csv(tmp_path):
    members = [
        {"last_name": "Dupont", "first_name": "Marie"},
        {"last_name": "Durand", "first_name": "Paul"},
    ]
    outfile = tmp_path / "out.csv"
    pd.DataFrame(members).to_csv(outfile, index=False, encoding="utf-8")
    df = pd.read_csv(outfile)
    assert list(df["last_name"]) == ["Dupont", "Durand"]
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_images.py ===

```python
# -*- coding: utf-8 -*-
import os
import tempfile
from club_manager.core.images import save_image, delete_image, list_images, IMAGE_FOLDER

def test_save_delete_list_image(tmp_path, monkeypatch):
    # Crée une image temporaire
    img = tmp_path / "testimg.png"
    img.write_bytes(b"\x89PNG\r\n\x1a\n")
    # Redirige IMAGE_FOLDER vers un dossier temporaire
    monkeypatch.setattr("club_manager.core.images.IMAGE_FOLDER", str(tmp_path))
    dest = save_image(str(img), "logo_test.png")
    assert os.path.exists(dest)
    assert "logo_test.png" in list_images()
    delete_image("logo_test.png")
    assert "logo_test.png" not in list_images()
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_imports.py ===

```python
# -*- coding: utf-8 -*-
import csv
import tempfile
from club_manager.core.imports import import_csv_to_table, guess_csv_fields
from club_manager.core.database import Database

def test_guess_csv_fields(tmp_path):
    csvfile = tmp_path / "test.csv"
    with open(csvfile, "w", encoding="utf-8") as f:
        f.write("nom,prenom,ville\nDupont,Marie,Paris\n")
    fields = guess_csv_fields(str(csvfile))
    assert fields == ["nom", "prenom", "ville"]

def test_import_csv_to_table(tmp_path, monkeypatch):
    dbfile = tmp_path / "imp.db"
    csvfile = tmp_path / "in.csv"
    with open(csvfile, "w", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=["last_name", "first_name"])
        writer.writeheader()
        writer.writerow({"last_name": "Test", "first_name": "User"})
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    # Simule le QFileDialog
    monkeypatch.setattr("PyQt5.QtWidgets.QFileDialog.getOpenFileName", lambda *a, **k: (str(csvfile), ""))
    import_csv_to_table("members", {"last_name": "last_name", "first_name": "first_name"}, parent=None)
    rows = db.query("SELECT * FROM members WHERE last_name='Test'")
    assert rows
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_mailing.py ===

```python
# -*- coding: utf-8 -*-
import pytest
from club_manager.core.mailing import send_mailing

def test_send_mailing(monkeypatch):
    smtp_calls = []
    class DummySMTP:
        def __init__(self, host, port): pass
        def starttls(self): pass
        def login(self, user, password): pass
        def sendmail(self, from_, to, msg): smtp_calls.append((from_, to, msg))
        def __enter__(self): return self
        def __exit__(self, *a): pass
    monkeypatch.setattr("smtplib.SMTP", DummySMTP)
    send_mailing(
        "Sujet test", "Message test",
        ["foo@bar.com"], {"from": "me@bar.com", "host": "localhost"},
        parent=None
    )
    assert smtp_calls
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_mailing_advanced.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.mailing_advanced import personalize_template, select_recipients

def test_personalize_template():
    template = "Bonjour {prenom} {nom} !"
    context = {"prenom": "Marie", "nom": "Dupont"}
    msg = personalize_template(template, context)
    assert msg == "Bonjour Marie Dupont !"

def test_select_recipients():
    members = [
        {"last_name": "A", "status": "Payé"},
        {"last_name": "B", "status": "En attente"},
    ]
    sel = select_recipients(members, {"status": "Payé"})
    assert len(sel) == 1 and sel[0]["last_name"] == "A"
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_members.py ===

```python
# -*- coding: utf-8 -*-
import pytest
from club_manager.core.database import Database
from club_manager.core.members import add_member, get_all_members, delete_member

@pytest.fixture
def db(tmp_path, monkeypatch):
    dbfile = tmp_path / "test.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    yield db
    db.close()

def test_add_and_delete_member(db, monkeypatch):
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    add_member(last_name="Test", first_name="User")
    members = get_all_members()
    assert any(m["last_name"] == "Test" for m in members)
    member_id = [m["id"] for m in members if m["last_name"] == "Test"][0]
    delete_member(member_id)
    members = get_all_members()
    assert all(m["last_name"] != "Test" for m in members)
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_relance.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.relance import get_members_to_remind, mark_relance_sent
from club_manager.core.database import Database

def test_get_members_to_remind_and_mark(tmp_path, monkeypatch):
    dbfile = tmp_path / "relance.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    db.execute("INSERT INTO members (last_name, first_name) VALUES (?, ?)", ("R", "L"))
    db.execute("INSERT INTO sessions (name, start, end, club_amount, mjc_amount, is_current) VALUES (?, ?, ?, ?, ?, ?)", ("2024", "2024-01-01", "2024-12-31", 100, 10, 1))
    db.execute("INSERT INTO cotisations (member_id, session_id, amount, paid, status) VALUES (?, ?, ?, ?, ?)", (1, 1, 100, 0, "En attente"))
    members = get_members_to_remind()
    assert any(m["last_name"] == "R" for m in members)
    mark_relance_sent(1)
    cots = db.query("SELECT status FROM cotisations WHERE id=1")
    assert cots[0]["status"] == "Relancé"
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_rgpd.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.rgpd import purge_rgpd, is_rgpd_ready
from club_manager.core.database import Database

def test_purge_rgpd(tmp_path, monkeypatch):
    dbfile = tmp_path / "rgpd.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    db.execute("INSERT INTO members (last_name, first_name, rgpd) VALUES (?, ?, ?)", ("Test", "RGPD", 1))
    purge_rgpd()
    rows = db.query("SELECT * FROM members")
    assert rows[0]["last_name"] in ("ANONYMISE", "Test")
    db.close()

def test_is_rgpd_ready():
    member = {"rgpd": 1}
    assert is_rgpd_ready(member)
    member = {"rgpd": 0}
    assert not is_rgpd_ready(member)
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_sessions.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.sessions import add_session, get_all_sessions, set_current_session
from club_manager.core.database import Database

def test_add_and_set_current_session(tmp_path, monkeypatch):
    dbfile = tmp_path / "sess.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    add_session("2023/2024", "2023-09-01", "2024-06-30", 120, 25, is_current=True)
    add_session("2024/2025", "2024-09-01", "2025-06-30", 130, 30, is_current=False)
    set_current_session(2)
    sess = get_all_sessions()
    current = [s for s in sess if s["is_current"]][0]
    assert current["name"] == "2024/2025"
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_statistics.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.statistics import count_members, count_members_by_city, count_cotisations_by_status, total_collected_fees, session_history
from club_manager.core.database import Database

def test_statistics(tmp_path, monkeypatch):
    dbfile = tmp_path / "stat.db"
    monkeypatch.setattr("club_manager.core.database.Database._instance", None)
    db = Database(str(dbfile))
    monkeypatch.setattr("club_manager.core.database.Database.instance", lambda: db)
    db.execute("INSERT INTO members (last_name, first_name, city) VALUES (?, ?, ?)", ("A", "B", "C"))
    db.execute("INSERT INTO cotisations (member_id, session_id, amount, paid, status) VALUES (?, ?, ?, ?, ?)", (1, 1, 100, 100, "Payé"))
    db.execute("INSERT INTO sessions (name, start, end, club_amount, mjc_amount, is_current) VALUES (?, ?, ?, ?, ?, ?)", ("S1", "2020-01-01", "2020-12-31", 100, 20, 1))
    assert count_members() == 1
    assert count_members_by_city()[0]["city"] == "C"
    assert count_cotisations_by_status()[0]["status"] == "Payé"
    assert total_collected_fees() == 100
    assert session_history()
    db.close()
```


# ===== FICHIER SUIVANT =====

# === Fichier: tests/test_utils.py ===

```python
# -*- coding: utf-8 -*-
from club_manager.core.utils import is_email_valid, is_phone_valid, format_currency, safe_str

def test_is_email_valid():
    assert is_email_valid("foo@bar.com")
    assert not is_email_valid("foo@bar")
    assert not is_email_valid("foo.com")

def test_is_phone_valid():
    assert is_phone_valid("0601020304")
    assert is_phone_valid("06-01-02-03-04")
    assert not is_phone_valid("1234")

def test_format_currency():
    assert format_currency(10) == "10.00 €"
    assert format_currency("abc") == "abc"

def test_safe_str():
    assert safe_str(123) == "123"
    assert isinstance(safe_str(object()), str)
```
